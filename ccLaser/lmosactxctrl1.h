#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CLmosactxctrl1 wrapper class

class CLmosactxctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLmosactxctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x18213698, 0xA9C9, 0x11D1, { 0xA2, 0x20, 0x0, 0x60, 0x97, 0x30, 0x58, 0xF6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    JobEnd = 0,
    MarkingEnd = 1,
    SystemReady = 2
}eSignalConstants;
enum
{
    ImageOK = 0,
    ImageStop = 1,
    ImageWarning = 2,
    ImageError = 3
}ImageResultConstants;
enum
{
    Port1A = 0,
    Port1C = 1,
    Port2A = 2,
    Port2B = 3,
    Port2C = 4
}OutPortConstants;
enum
{
    Port1B = 0,
    Port1C_In = 1,
    Port1D = 2,
    Port1E = 3
}InPortConstants;
enum
{
    R_AXIS = 9,
    S_AXIS = 10,
    T_AXIS = 11,
    U_AXIS = 12,
    V_AXIS = 13,
    W_AXIS = 14,
    X_AXIS = 15,
    Y_AXIS = 16,
    Z_AXIS = 17,
    NO_AXIS = 30
}eAxisType;
enum
{
    VELOCITY = 2,
    ACCELERATION = 3,
    DECELERATION = 4,
    SCALE_USR = 5,
    SCALE_INC = 6,
    MIN_VELOCITY = 19,
    MAX_VELOCITY = 20,
    SETACTUAL_POSITION = 32,
    ACCELERATION_MIN = 33,
    ACCELERATION_MAX = 34,
    DECELERATION_MIN = 35,
    DECELERATION_MAX = 36,
    DECEL_IDENTICAL_ACCEL = 37
}eAxisParamType;
enum
{
    AXIS_STATE_OPERATING = 0,
    AXIS_STATE_IN_POSITION = 1,
    AXIS_STATE_REFERENCED = 2
}eAxisStateType;
enum
{
    AXIS_ERROR_GENERAL = 0,
    AXIS_ERROR_NO_REF = 1,
    AXIS_ERROR_MOVING_ACTIVE = 2,
    AXIS_ERROR_SW_LIMIT_MIN = 3,
    AXIS_ERROR_SW_LIMIT_MAX = 4,
    AXIS_ERROR_HW_LIMIT_MIN = 5,
    AXIS_ERROR_HW_LIMIT_MAX = 6
}eAxisErrorType;
enum
{
    JOG_STOP = 0,
    JOG_NEG_SLOW = 1,
    JOG_POS_SLOW = 2,
    JOG_NEG_FAST = 3,
    JOG_POS_FAST = 4
}eJogType;
enum
{
    StateClosed = 0,
    StateOpen = 1,
    StateError = -1
}ShutterStateConstants;
enum
{
    laserSubStateInstable = 0,
    laserSubStateStable = 1,
    laserSubStateConservation = 2,
    laserSubStateWarmup = 3
}eLaserSubStateConstants;
enum
{
    ResFont = 0,
    ResLPSet = 1,
    ResFile = 2,
    ResVar = 3,
    ResHPSet = 4
}eResourceTypes;
enum
{
    Mod_Nothing = 0,
    Mod_Mico = 1,
    Mod_BeamSwitch = 2,
    Mod_Aperture = 4,
    Mod_Axes = 8,
    Mod_Driver = 16,
    Mod_PowerConfig = 32,
    Mod_PosHelp = 64,
    Mod_All = 127,
    No_Mico = 65536,
    No_BeamSwitch = 131072,
    No_Aperture = 262144,
    No_Axes = 524288,
    No_Driver = 1048576,
    No_PowerConfig = 2097152,
    No_PosHelp = 4194304
}eMachineModuleConstants;
enum
{
    SHUTTER_OPEN = 0,
    WATER_TEMP = 1,
    CABINET_TEMP = 2,
    FREQUENCY_ACT = 3,
    CURRENT_ACT = 4,
    LASER_STATE = 5,
    LASER_ACTIVE = 6,
    WATER_FLOW_MIN_PROG = 7,
    WATER_FLOW = 8,
    VALVE_LEVEL = 9,
    EXT_WATER_VALVE = 10,
    OPERATION_TIME_SYSTEM = 11,
    BEAM_ON = 12,
    POWER_ACT = 13,
    OPERATION_TIME_DIODE = 14
}eSystemParameterGet;
enum
{
    SHUTTER_OPEN_SET = 0,
    FREQUENCY_ACT_SET = 1,
    CURRENT_ACT_SET = 2,
    LASER_ACTIVE_SET = 3
}eSystemParameterSet;
enum
{
    INBIT = 0,
    OUTBIT = 1
}eIODirection;
enum
{
    ALARM_NONE = 0,
    ALARM_LASER_COMM = 1,
    ALARM_LASER = 2,
    ALARM_LASER_POWER = 3,
    ALARM_PLC_COMM = 4,
    ALARM_PLC_AXES = 5,
    ALARM_BEAMSWITCH = 6,
    ALARM_APERTURE = 7,
    ALARM_STEPANDREPEAT = 8,
    ALARM_GALVO = 9,
    ALARM_MO_EXECUTE = 10,
    ALARM_MO_RESOURCE = 11,
    ALARM_UNKNOWN = 12,
    ALARM_STOP = 13,
    ALARM_XXDRIVER = 14,
    ALARM_FIELD_CORR = 15,
    ALARM_NO_MARK = 16,
    ALARM_CONTROLLER = 17,
    ALARM_ASC = 18,
    ALARM_SHADOW = 19,
    ALARM_MISSING_AXIS = 20,
    ALARM_SHUTTER_PROCESS = 21,
    ALARM_LAST_ALARM = 22
}ALARM;
enum
{
    pgResultNothing = 0,
    pgResultValidationOk = 1,
    pgResultValidationFailed = 2,
    pgResultRegulationOk = 3,
    pgResultCancel = 4,
    pgResultError = 5
}pgResultConstants;
enum
{
    pgNoReferenceMeasurement = 1792,
    pgAlreadyActiveMeasurement = 1793
}pgErrorConstants;
enum
{
    pgSystemStart = 1,
    pgJobLoad = 2,
    pgStartMarking = 3
}pgHandleEventConstants;
enum
{
    lmosErrorInvalidLayerName = 1536,
    lmosErrorInvalidVariableIndex = 1537,
    lmosErrorInvalidVariableValue = 1538,
    lmosErrorNoPowerMeasurementInstalled = 1539,
    lmosErrorNoPowerMeasurementWhileMarking = 1540,
    lmosErrorNoMO = 1541,
    lmosErrorNoTree = 1542,
    lmosErrorNoDCPcld = 1543,
    lmosErrorAlarm = 1544,
    lmosErrorInvalidState = 1545,
    lmosErrorNoAxis = 1546,
    lmosErrorImport = 1547,
    lmosErrorGlobalVars = 1548,
    lmosErrorCorrection = 1549,
    lmosErrorSizePos = 1550,
    lmosErrorMOQPSet = 1551,
    lmosErrorQPSetProperties = 1648,
    lmosErrorSelectBinAll = 1649,
    lmosErrorSetOccAll = 1650
}LMOSActXErrorConstants;
enum
{
    lmosCategorySetup = 0,
    lmosCategoryGalvo1 = 1,
    lmosCategoryGalvo2 = 2,
    lmosCategoryGalvoControl = 3,
    lmosCategoryAxes = 4,
    lmosCategoryAperture = 5,
    lmosCategoryMisc = 6
}MachineCfgCategoryConstants;
enum
{
    lmosValueXAxisEndless = 0,
    lmosValueYAxisEndless = 1,
    lmosValueZAxisEndless = 2,
    lmosValueVAxisEndless = 3,
    lmosValueWAxisEndless = 4
}MachineCfgValueConstants;
enum
{
    lmosKeepTextHeight = 3,
    lmosKeepRatio = 7,
    lmosSizeToFrame = 1
}FrameModeConstants;
enum
{
    lmosLeftTop = 0,
    lmosCenterTop = 1,
    lmosRightTop = 2,
    lmosLeftCenter = 3,
    lmosCenterCenter = 4,
    lmosRightCenter = 5,
    lmosLeftBottom = 6,
    lmosCenterBottom = 7,
    lmosRightBottom = 8
}OrientationConstants;
enum
{
    LOCAL_QPSET = 0,
    GLOBAL_QPSET = 1
}eQPType;
enum
{
    CURRENT = 0,
    FREQUENCY = 1,
    SPEED = 2,
    LIMIT = 3,
    STEP = 4,
    DELAY_BEAM_ON = 5,
    DELAY_BEAM_OFF = 6,
    DELAY_CORNER = 7,
    DELAY_JUMP_MAX = 8,
    DELAY_JUMP_MIN = 9,
    DELAY_SATUR = 10,
    APERTURE_SIZE = 11,
    PARAMETER_ID = 12,
    DELAY_AFTER_GATE = 13,
    DELAY_OTF_BEGIN = 14,
    DELAY_OTF_END = 15,
    JUMP_SPEED = 16,
    PULSE_WIDTH = 17,
    LINE_WIDTH = 18,
    GREY_TABLE = 19
}eParamType;
enum
{
    lmosMOUndefined = 0,
    lmosMORoot = 22,
    lmosMOGroup = 16,
    lmosMOMaxMarkingArea = 19,
    lmosMOGalvoGroupShadow = 18,
    lmosMOGalvoHeadShadow = 20,
    lmosMOProxy = 21,
    lmosMOBarcode = 1,
    lmosMOMatrixCode = 8,
    lmosMOBezier = 2,
    lmosMOBitmap = 3,
    lmosMOEllipse = 5,
    lmosMOLogo = 6,
    lmosMOPolyLine = 9,
    lmosMORectangle = 10,
    lmosMOText = 11,
    lmosMORingText = 12,
    lmosMOBurst = 4,
    lmosMOInfoglyph = 14,
    lmosMOVLMRef = 13,
    lmosMOMatrix = 7,
    lmosMOMatrixCell = 15,
    lmosMOTable = 17,
    lmosMOMatrixcodeGroup = 23
}LMOSMOTypeConstants;
enum
{
    lmosQPTypeIndividual = 10,
    lmosQPTypeLocal = 11,
    lmosQPTypeGlobal = 12
}LMOSQPSetTypeConstants;
enum
{
    SMALL_APERTURE = 1,
    LARGE_APERTURE = 2
}eAperture;
enum
{
    HEAD1 = 0,
    HEAD2 = 1
}eHeads;
enum
{
    CALIBRATE = 0,
    MEASURE = 1
}eDriftModes;
enum
{
    lmosSaveAsCurrentVersion = 0,
    lmosSaveAsVersion32 = 1,
    lmosSaveAsVersion36 = 2,
    lmosSaveAsVersion46 = 3
}LMOSSaveAsVersionConstants;
enum
{
    LOCAL_HATCH_SET = 0,
    GLOBAL_HATCH_SET = 1
}eHSType;
enum
{
    Unidirectional = 0,
    Bidirectional = 1,
    Meandering = 2,
    ON_THE_FLY = 3,
    LINE_EXCESS = 4,
    NO_OUTLINE = 5,
    Inverse = 6,
    AUTO_LINEWIDTH = 7,
    OPTIMIZE_JUMPS = 8,
    HATCH_ANGLE = 9,
    HATCH_ANGLE_STEP = 10,
    Overlap = 11,
    REPEAT_COUNT = 12,
    DISTANCE_TO_OUTLINE = 13,
    DISTANCE_TO_OUTLINE_STEP = 14,
    OUTLINE_OFFSET = 15,
    HATCH_TO_OUTLINE = 16,
    OUTLINE_CORRECTION = 17,
    INTERLEAVE = 18
}eHatchParamType;


// Operations
public:

// _DLMOSActX

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ShowMatrixCell()
	{
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ShowWholeDrawing()
	{
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL StartMarking()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL StopMarking()
	{
		BOOL result;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL CancelJob()
	{
		BOOL result;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SetText(LPCTSTR ObjectName, LPCTSTR VariableValue)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, VariableValue);
		return result;
	}
	CString GetText(LPCTSTR ObjectName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ObjectName);
		return result;
	}
	BOOL SetLogo(LPCTSTR ObjectName, LPCTSTR VariableValue)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, VariableValue);
		return result;
	}
	CString GetLogo(LPCTSTR ObjectName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ObjectName);
		return result;
	}
	CString GetMarkingFilesPath()
	{
		CString result;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString GetLogoFilesPath()
	{
		CString result;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL SetPosValues(LPCTSTR ObjectName, double dX, double dY, double dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_R8 VTS_R8 VTS_R8 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, dX, dY, dAngle);
		return result;
	}
	BOOL GetPosValues(LPCTSTR ObjectName, double * dX, double * dY, double * dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, dX, dY, dAngle);
		return result;
	}
	BOOL RotateA(LPCTSTR ObjectName, double dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_R8 ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, dAngle);
		return result;
	}
	BOOL MoveA(LPCTSTR ObjectName, double dX, double dY)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_R8 VTS_R8 ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, dX, dY);
		return result;
	}
	BOOL ReadByte(long Port, short bMask, short * InByte)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_PI2 ;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Port, bMask, InByte);
		return result;
	}
	BOOL DrawingPosOffset(double dX, double dY)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dX, dY);
		return result;
	}
	BOOL DrawingAngleOffset(double dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dAngle);
		return result;
	}
	long GetMatrixCellAmount(LPCTSTR MatrixName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_I4, (void*)&result, parms, MatrixName);
		return result;
	}
	BOOL LoadJob()
	{
		BOOL result;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SetMatrixRefCell(LPCTSTR MatrixName, long iIndex, BOOL bDrawRefCellOnly)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BOOL ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, iIndex, bDrawRefCellOnly);
		return result;
	}
	BOOL JobLoaded()
	{
		BOOL result;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL GetDimension(LPCTSTR ObjectName, double * dWidth, double * dHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, dWidth, dHeight);
		return result;
	}
	BOOL SetMatrixCellAngle(LPCTSTR MatrixName, double dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_R8 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, dAngle);
		return result;
	}
	BOOL InitMachine()
	{
		BOOL result;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL TermMachine()
	{
		BOOL result;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SetMatrixCellOffset(LPCTSTR MatrixName, long iCellIndex, double OffX, double OffY, double OffPhi)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_R8 VTS_R8 VTS_R8 ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, iCellIndex, OffX, OffY, OffPhi);
		return result;
	}
	BOOL SetMatrixCellOccupation(LPCTSTR MatrixName, long iCellIndex, BOOL IsOccupied)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BOOL ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, iCellIndex, IsOccupied);
		return result;
	}
	void SynchronizeMarking()
	{
		InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL WriteByte(long Port, short bMask, short bData)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_I2 ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Port, bMask, bData);
		return result;
	}
	BOOL WaitOnByte(long Port, short bMask, short bData, long lTimeOut)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I2 VTS_I2 VTS_I4 ;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Port, bMask, bData, lTimeOut);
		return result;
	}
	BOOL FileName2(LPCTSTR FName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FName);
		return result;
	}
	CString GetMatrixCustomType(LPCTSTR MatrixName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, MatrixName);
		return result;
	}
	BOOL GetMatrixRowsAndColsCnt(LPCTSTR MatrixName, short * RowCnt, short * ColCnt)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PI2 VTS_PI2 ;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, RowCnt, ColCnt);
		return result;
	}
	BOOL ReplaceGlobalQPSet(LPCTSTR OriginalQPSetName, LPCTSTR NewQPSetName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, OriginalQPSetName, NewQPSetName);
		return result;
	}
	BOOL ReplaceLocalQPSet(LPCTSTR OriginalQPSetName, LPCTSTR NewQPSetName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, OriginalQPSetName, NewQPSetName);
		return result;
	}
	BOOL get_AutoSignalJobEnd()
	{
		BOOL result;
		InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoSignalJobEnd(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	BOOL get_AutoSignalMarkingEnd()
	{
		BOOL result;
		InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_AutoSignalMarkingEnd(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	LPDISPATCH get_Layer(LPCTSTR Name)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Name);
		return result;
	}
	LPDISPATCH get_Axis()
	{
		LPDISPATCH result;
		InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL ClearLayout()
	{
		BOOL result;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL MatrixSelectBin(LPCTSTR MatrixName, long CellIndex, long BinNum)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 ;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, CellIndex, BinNum);
		return result;
	}
	long MatrixQueryBin(LPCTSTR MatrixName, long CellIndex)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, MatrixName, CellIndex);
		return result;
	}
	long GetMatrixMaxBinCount(LPCTSTR MatrixName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms, MatrixName);
		return result;
	}
	BOOL SetMatrixMaxBinCount(LPCTSTR MatrixName, long MaxBinCount)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, MaxBinCount);
		return result;
	}
	BOOL MatrixAssignBinLayout(LPCTSTR MatrixName, long BinNum, LPCTSTR LayoutName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BSTR ;
		InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, BinNum, LayoutName);
		return result;
	}
	BOOL MatrixAssignBinText(LPCTSTR MatrixName, long BinNum, LPCTSTR ObjectName, LPCTSTR BinText)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, BinNum, ObjectName, BinText);
		return result;
	}
	BOOL get_SuppressAutoRedraw()
	{
		BOOL result;
		InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void put_SuppressAutoRedraw(BOOL newValue)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x34, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, newValue);
	}
	void RedrawLayout()
	{
		InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	CString MatrixQueryBinText(LPCTSTR MatrixName, long BinNum, LPCTSTR ObjectName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BSTR ;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, MatrixName, BinNum, ObjectName);
		return result;
	}
	BOOL PLCCommand(LPCTSTR ID1, LPCTSTR ID2, LPCTSTR Command)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ID1, ID2, Command);
		return result;
	}
	CString get_VLMVersion()
	{
		CString result;
		InvokeHelper(0x38, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString get_VLMBuildLevel()
	{
		CString result;
		InvokeHelper(0x39, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL ExportVISFile(LPCTSTR VISFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, VISFileName);
		return result;
	}
	long get_VariableCnt()
	{
		long result;
		InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_Variable(long Index)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, Index);
		return result;
	}
	BOOL DrawingSetPosValues(double dX, double dY, double dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dX, dY, dAngle);
		return result;
	}
	BOOL DrawingGetDimension(double * dWidth, double * dHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dWidth, dHeight);
		return result;
	}
	BOOL DrawingGetPosValues(double * dX, double * dY, double * dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dX, dY, dAngle);
		return result;
	}
	BOOL TTLFieldCorr(LPCTSTR FileName, short Action, short Head)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 VTS_I2 ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FileName, Action, Head);
		return result;
	}
	BOOL TTLGetAbsPosValues(LPCTSTR ObjectName, long lMatrixCellIndex, double * dX, double * dY, double * dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, lMatrixCellIndex, dX, dY, dAngle);
		return result;
	}
	BOOL TTLPxLaser(double dX, double dY)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 ;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dX, dY);
		return result;
	}
	BOOL TTLPxCamera(double dX, double dY)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 ;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dX, dY);
		return result;
	}
	BOOL SelectSingleStep(long StepIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, StepIndex);
		return result;
	}
	BOOL MatrixQueryCellsPerPart(LPCTSTR MatrixName, long PartIndex, long * CellStartIndex, long * CellCnt)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, PartIndex, CellStartIndex, CellCnt);
		return result;
	}
	BOOL MatrixQueryPartCnt(LPCTSTR MatrixName, long * PartCnt)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PI4 ;
		InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, PartCnt);
		return result;
	}
	LPDISPATCH get_PowerDlg()
	{
		LPDISPATCH result;
		InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_MachineCfg()
	{
		LPDISPATCH result;
		InvokeHelper(0x48, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void ShowMatrixCell2(LPCTSTR MatrixName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms, MatrixName);
	}
	void ShowMarkingArea()
	{
		InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long IsMOName(LPCTSTR MOName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x4b, DISPATCH_METHOD, VT_I4, (void*)&result, parms, MOName);
		return result;
	}
	BOOL SetLaserable(LPCTSTR MOName, BOOL bFlag)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, bFlag);
		return result;
	}
	BOOL SetMODescription(LPCTSTR MOName, LPCTSTR description)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, description);
		return result;
	}
	CString GetMODescription(LPCTSTR MOName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x4e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, MOName);
		return result;
	}
	BOOL SetGlobalQPSet(LPCTSTR QPSetName, double CURRENT, long SPEED, long FREQUENCY, BOOL bSave)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_R8 VTS_I4 VTS_I4 VTS_BOOL ;
		InvokeHelper(0x4f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, QPSetName, CURRENT, SPEED, FREQUENCY, bSave);
		return result;
	}
	BOOL GetGlobalQPSet(LPCTSTR QPSetName, double * CURRENT, long * SPEED, long * FREQUENCY)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0x50, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, QPSetName, CURRENT, SPEED, FREQUENCY);
		return result;
	}
	BOOL ImportXMLFile(LPCTSTR XMLFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, XMLFileName);
		return result;
	}
	BOOL Save(LPCTSTR FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FileName);
		return result;
	}
	LPDISPATCH get_LocalVariables()
	{
		LPDISPATCH result;
		InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_GlobalVariables()
	{
		LPDISPATCH result;
		InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	LPDISPATCH get_TextObjects(LPCTSTR MOName)
	{
		LPDISPATCH result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms, MOName);
		return result;
	}
	BOOL GetPosValuesAbs(LPCTSTR ObjectName, long lMatrixCellIndex, double * dX, double * dY, double * dAngle)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x56, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, lMatrixCellIndex, dX, dY, dAngle);
		return result;
	}
	BOOL LoadXML(LPCTSTR XMLString)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x57, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, XMLString);
		return result;
	}
	LPDISPATCH get_Layers()
	{
		LPDISPATCH result;
		InvokeHelper(0x58, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void BeamOn(BOOL bOn)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bOn);
	}
	BOOL SetDimension(LPCTSTR ObjectName, double dWidth, double dHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_R8 VTS_R8 ;
		InvokeHelper(0x5a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ObjectName, dWidth, dHeight);
		return result;
	}
	void StartPosHelp(LPCTSTR ObjectName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ObjectName);
	}
	void StopPosHelp()
	{
		InvokeHelper(0x5c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL PLCCommandEx(LPCTSTR ID1, LPCTSTR ID2, VARIANT Command)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_VARIANT ;
		InvokeHelper(0x5d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ID1, ID2, &Command);
		return result;
	}
	BOOL LoadInclinedPlaneFCR(double dAlpha, double dBeta, double dBeamOrigin, double dPlaneIntersectionOffset, long lPlaneIntersectionOrientation, long lHeadIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x5e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dAlpha, dBeta, dBeamOrigin, dPlaneIntersectionOffset, lPlaneIntersectionOrientation, lHeadIndex);
		return result;
	}
	void AddGlobalQPSet(LPCTSTR Name, double CURRENT, long SPEED, long FREQUENCY)
	{
		static BYTE parms[] = VTS_BSTR VTS_R8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, CURRENT, SPEED, FREQUENCY);
	}
	void RemoveGlobalQPSet(LPCTSTR Name)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name);
	}
	void AddLocalQPSet(LPCTSTR Name, double CURRENT, long SPEED, long FREQUENCY)
	{
		static BYTE parms[] = VTS_BSTR VTS_R8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name, CURRENT, SPEED, FREQUENCY);
	}
	void RemoveLocalQPSet(LPCTSTR Name)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Name);
	}
	void SaveGlobalQPSets()
	{
		InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	VARIANT GetGlobalQPSetNames()
	{
		VARIANT result;
		InvokeHelper(0x64, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT GetLocalQPSetNames()
	{
		VARIANT result;
		InvokeHelper(0x65, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	VARIANT GetMONames()
	{
		VARIANT result;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	BOOL ExportPl0(LPCTSTR PL0FileName, BOOL bShowInitDlg)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL ;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, PL0FileName, bShowInitDlg);
		return result;
	}
	BOOL GetQualityParam(LPCTSTR qpname, long qptype, long partype, VARIANT * varVal)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_PVARIANT ;
		InvokeHelper(0x68, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, qpname, qptype, partype, varVal);
		return result;
	}
	BOOL SetQualityParam(LPCTSTR qpname, long qptype, long partype, VARIANT varVal, BOOL bSave)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT VTS_BOOL ;
		InvokeHelper(0x69, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, qpname, qptype, partype, &varVal, bSave);
		return result;
	}
	void ShowMatrixCellZoom()
	{
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL ImportDXFFile(LPCTSTR DXFFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x6b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DXFFileName);
		return result;
	}
	long GetShutterState()
	{
		long result;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetMissingResources(VARIANT * list)
	{
		long result;
		static BYTE parms[] = VTS_PVARIANT ;
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, list);
		return result;
	}
	BOOL DrawingSetDimension(double dWidth, double dHeight)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 ;
		InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, dWidth, dHeight);
		return result;
	}
	BOOL ClearAlarms()
	{
		BOOL result;
		InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	VARIANT GetAlarms()
	{
		VARIANT result;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	void ImportXMLFile2(LPCTSTR XMLFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x71, DISPATCH_METHOD, VT_EMPTY, NULL, parms, XMLFileName);
	}
	void LoadXML2(LPCTSTR XMLString)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x72, DISPATCH_METHOD, VT_EMPTY, NULL, parms, XMLString);
	}
	void ImportDXFFile2(LPCTSTR DXFFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x73, DISPATCH_METHOD, VT_EMPTY, NULL, parms, DXFFileName);
	}
	void DriftCorr(double lambda1, double lambda2, double deltax, double deltay, long hindex)
	{
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_I4 ;
		InvokeHelper(0x74, DISPATCH_METHOD, VT_EMPTY, NULL, parms, lambda1, lambda2, deltax, deltay, hindex);
	}
	void StdCorr(long hindex)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, parms, hindex);
	}
	BOOL GetMatrixCellProperties(LPCTSTR MatrixName, double * Width, double * Height, double * XOffset, double * YOffset, double * XShift, double * YShift, double * Orientation)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x76, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, Width, Height, XOffset, YOffset, XShift, YShift, Orientation);
		return result;
	}
	BOOL GetMatrixInterleaveProperties(LPCTSTR MatrixName, double * X, double * Y)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, X, Y);
		return result;
	}
	BOOL GetMatrixGroupProperties(LPCTSTR MatrixName, double * X, short * xElements, double * Y, short * yElements)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PI2 VTS_PR8 VTS_PI2 ;
		InvokeHelper(0x78, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, X, xElements, Y, yElements);
		return result;
	}
	BOOL GetMatrixOptionProperties(LPCTSTR MatrixName, BSTR * CustomType, BOOL * ColoredCell, BOOL * ShowReferenceCell, BOOL * BinLayoutStatic, BOOL * BinLayoutDynamic, short * maxBin, BOOL * Multiplexed)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PBSTR VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PI2 VTS_PBOOL ;
		InvokeHelper(0x79, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, CustomType, ColoredCell, ShowReferenceCell, BinLayoutStatic, BinLayoutDynamic, maxBin, Multiplexed);
		return result;
	}
	BOOL GetLogoProperties(LPCTSTR LogoName, BSTR * FileName, BOOL * OriginalSize, double * xScale, double * yScale, double * Slant, BOOL * Hatch)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PBSTR VTS_PBOOL VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL ;
		InvokeHelper(0x7a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LogoName, FileName, OriginalSize, xScale, yScale, Slant, Hatch);
		return result;
	}
	BOOL GetHatchProperties(LPCTSTR MOName, BOOL * Unidirectional, BOOL * Bidirectional, BOOL * Meandering, BOOL * OnTheFly, double * LineExcess, BOOL * NoOutline, BOOL * Inverse, BOOL * OutlineCorrection, BOOL * AutoLineWitdth, BOOL * OptimizeJumps, double * HatchAngle, double * FromOutline, double * Overlap)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PR8 VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0x7b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, Unidirectional, Bidirectional, Meandering, OnTheFly, LineExcess, NoOutline, Inverse, OutlineCorrection, AutoLineWitdth, OptimizeJumps, HatchAngle, FromOutline, Overlap);
		return result;
	}
	BOOL GetBackgroundProperties(LPCTSTR MOName, BOOL * ShowFrame, BOOL * DrawFrame, BOOL * BackgroundBitmap, BSTR * BitmapName, BOOL * BackgroundColor, long * Color)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PBSTR VTS_PBOOL VTS_PI4 ;
		InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, ShowFrame, DrawFrame, BackgroundBitmap, BitmapName, BackgroundColor, Color);
		return result;
	}
	BOOL GetLayerProperties(LPCTSTR MOName, BSTR * LayerName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PBSTR ;
		InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, LayerName);
		return result;
	}
	long GetMOType(LPCTSTR MOName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x7e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, MOName);
		return result;
	}
	BOOL GetSizePosProperties(LPCTSTR MOName, double * PositionX, double * PositionY, double * SizeDX, double * SizeDY, double * Angle, BOOL * PreserveAspectRatio, BOOL * FlipHorizontal, BOOL * FlipVertical, long * RefPoint)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PI4 ;
		InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, PositionX, PositionY, SizeDX, SizeDY, Angle, PreserveAspectRatio, FlipHorizontal, FlipVertical, RefPoint);
		return result;
	}
	BOOL GetMOQPSet(LPCTSTR MOName, BSTR * QPSetName, long * QPSetType)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PBSTR VTS_PI4 ;
		InvokeHelper(0x80, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, QPSetName, QPSetType);
		return result;
	}
	BOOL GetQPSetProperties(LPCTSTR QPSetName, long QPSetType, LPCTSTR MOName, VARIANT * PropertyNames, VARIANT * PropertyValues)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_BSTR VTS_PVARIANT VTS_PVARIANT ;
		InvokeHelper(0x81, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, QPSetName, QPSetType, MOName, PropertyNames, PropertyValues);
		return result;
	}
	BOOL ExportAsLogo(LPCTSTR LogoName, BOOL ExportEllipsesAsPolylines, long IncrementsPerFullEllipse)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_I4 ;
		InvokeHelper(0x82, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LogoName, ExportEllipsesAsPolylines, IncrementsPerFullEllipse);
		return result;
	}
	BOOL SetHatchProperties(LPCTSTR MOName, BOOL Unidirectional, BOOL Bidirectional, BOOL Meandering, BOOL OnTheFly, double LineExcess, BOOL NoOutline, BOOL Inverse, BOOL OutlineCorrection, BOOL AutoLineWidth, BOOL OptimizeJumps, double HatchAngle, double FromOutline, double Overlap)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_R8 VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL VTS_R8 VTS_R8 VTS_R8 ;
		InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, Unidirectional, Bidirectional, Meandering, OnTheFly, LineExcess, NoOutline, Inverse, OutlineCorrection, AutoLineWidth, OptimizeJumps, HatchAngle, FromOutline, Overlap);
		return result;
	}
	long GetNoMarkMOCount()
	{
		long result;
		InvokeHelper(0x84, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL InitMachineEx(long ModulesMask)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x85, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ModulesMask);
		return result;
	}
	BOOL TermMachineEx(long ModulesMask)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x86, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ModulesMask);
		return result;
	}
	BOOL SaveAsVersion(LPCTSTR FileName, long SaveVersion)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x87, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FileName, SaveVersion);
		return result;
	}
	BOOL GetRuntimeHeadOffset(double * X, double * Y, long hindex)
	{
		BOOL result;
		static BYTE parms[] = VTS_PR8 VTS_PR8 VTS_I4 ;
		InvokeHelper(0x88, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, X, Y, hindex);
		return result;
	}
	BOOL SetRuntimeHeadOffset(double X, double Y, long hindex)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_I4 ;
		InvokeHelper(0x89, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, X, Y, hindex);
		return result;
	}
	void RotateView(double Angle)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x8a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Angle);
	}
	BOOL MatrixSelectBinAll(LPCTSTR MatrixName, VARIANT * BinValues)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PVARIANT ;
		InvokeHelper(0x8b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, BinValues);
		return result;
	}
	BOOL SetMatrixCellOccupationAll(LPCTSTR MatrixName, VARIANT * OccValues)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_PVARIANT ;
		InvokeHelper(0x8c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, OccValues);
		return result;
	}
	BOOL ImportLogoFile(LPCTSTR XMLFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x8d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, XMLFileName);
		return result;
	}
	BOOL ImportLogoFile2(LPCTSTR XMLFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x8e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, XMLFileName);
		return result;
	}
	BOOL GetSignal(long Signal)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x8f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Signal);
		return result;
	}
	void SetSignal(long Signal, BOOL Value)
	{
		static BYTE parms[] = VTS_I4 VTS_BOOL ;
		InvokeHelper(0x90, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Signal, Value);
	}
	BOOL SplitDrawing(double offset, double Overlap)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 ;
		InvokeHelper(0x91, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, offset, Overlap);
		return result;
	}
	void StartPosHelpLast(LPCTSTR ObjectName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x92, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ObjectName);
	}
	void SaveGlobalHatchSets()
	{
		InvokeHelper(0x93, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	VARIANT GetGlobalHatchSetNames()
	{
		VARIANT result;
		InvokeHelper(0x94, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	BOOL GetHatchParam(LPCTSTR hpname, long hstype, long partype, VARIANT * varVal)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_PVARIANT ;
		InvokeHelper(0x95, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, hpname, hstype, partype, varVal);
		return result;
	}
	BOOL SetHatchParam(LPCTSTR hpname, long hstype, long partype, VARIANT varVal)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x96, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, hpname, hstype, partype, &varVal);
		return result;
	}
	void ShowMarkingAreaZoom()
	{
		InvokeHelper(0x97, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	LPDISPATCH get_AllComponents()
	{
		LPDISPATCH result;
		InvokeHelper(0x98, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	void SetAxisUsedInVLM(long eAxis, BOOL Value)
	{
		static BYTE parms[] = VTS_I4 VTS_BOOL ;
		InvokeHelper(0x99, DISPATCH_METHOD, VT_EMPTY, NULL, parms, eAxis, Value);
	}
	BOOL GetAxisUsedInVLM(long eAxis)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, eAxis);
		return result;
	}
	BOOL ReadIOBit(VARIANT bitfunction, VARIANT * Result)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_PVARIANT ;
		InvokeHelper(0x9b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &bitfunction, Result);
		return result;
	}
	BOOL WriteIOBit(VARIANT bitfunction, VARIANT values)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x9c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &bitfunction, &values);
		return result;
	}
	BOOL WaitOnIOBit(VARIANT bitfunction, VARIANT values, long timeout)
	{
		BOOL result;
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_I4 ;
		InvokeHelper(0x9d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, &bitfunction, &values, timeout);
		return result;
	}
	BOOL SelectShadow(long ShadowIndex)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ShadowIndex);
		return result;
	}
	BOOL GetIODefinitions(long eDir, VARIANT bitfunction)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0x9f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, eDir, &bitfunction);
		return result;
	}
	void DriftCorrInternal(long Head, long mode)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xa0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Head, mode);
	}
	BOOL GetSystemParameter(long partype, VARIANT * varVal)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_PVARIANT ;
		InvokeHelper(0xa1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, partype, varVal);
		return result;
	}
	BOOL SetSystemParameter(long partype, VARIANT varVal)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_VARIANT ;
		InvokeHelper(0xa2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, partype, &varVal);
		return result;
	}
	BOOL GetSurfaceRefPoint(double * RefX, double * RefY, double * RefZ)
	{
		BOOL result;
		static BYTE parms[] = VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0xa3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, RefX, RefY, RefZ);
		return result;
	}
	BOOL SetSurfaceRefPoint(double RefX, double RefY, double RefZ)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
		InvokeHelper(0xa4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, RefX, RefY, RefZ);
		return result;
	}
	BOOL GetSurfaceVector(double * VecX, double * VecY, double * VecZ)
	{
		BOOL result;
		static BYTE parms[] = VTS_PR8 VTS_PR8 VTS_PR8 ;
		InvokeHelper(0xa5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, VecX, VecY, VecZ);
		return result;
	}
	BOOL SetSurfaceVector(double VecX, double VecY, double VecZ)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_R8 ;
		InvokeHelper(0xa6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, VecX, VecY, VecZ);
		return result;
	}
	BOOL ShowZoomWindow(long topLeftX, long topLeftY, long bottomRightX, long bottomRightY)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xa7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, topLeftX, topLeftY, bottomRightX, bottomRightY);
		return result;
	}
	void ActivateZoomWindow(BOOL newState)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xa8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, newState);
	}
	BOOL ImportPSFile(LPCTSTR PSFileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xa9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, PSFileName);
		return result;
	}
	void ImportPSFile2(LPCTSTR PSFileName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xaa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, PSFileName);
	}
	BOOL IsFeatureLicensed(LPCTSTR feature)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, feature);
		return result;
	}
	BOOL SetMOLayer(LPCTSTR MOName, LPCTSTR LayerName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xac, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MOName, LayerName);
		return result;
	}
	BOOL ReplaceDrawing(LPCTSTR FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xad, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FileName);
		return result;
	}
	LPDISPATCH get_AllMachineCfgParams()
	{
		LPDISPATCH result;
		InvokeHelper(0xae, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
		return result;
	}
	BOOL SaveImage(long resx, long resy, LPCTSTR FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR ;
		InvokeHelper(0xaf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, resx, resy, FileName);
		return result;
	}
	BOOL GetSurfaceRadius(double * radius)
	{
		BOOL result;
		static BYTE parms[] = VTS_PR8 ;
		InvokeHelper(0xb0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, radius);
		return result;
	}
	BOOL SetSurfaceRadius(double radius)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, radius);
		return result;
	}
	long GetResources(VARIANT * list)
	{
		long result;
		static BYTE parms[] = VTS_PVARIANT ;
		InvokeHelper(0xb2, DISPATCH_METHOD, VT_I4, (void*)&result, parms, list);
		return result;
	}
	BOOL SaveImageWithRuler(long resx, long resy, LPCTSTR FileName)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_BSTR ;
		InvokeHelper(0xb3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, resx, resy, FileName);
		return result;
	}
	BOOL GetMatrixGroupData(LPCTSTR MatrixName, long Index, double * X, long * xElements, double * Y, long * yElements)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 VTS_PR8 VTS_PI4 VTS_PR8 VTS_PI4 ;
		InvokeHelper(0xb4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, MatrixName, Index, X, xElements, Y, yElements);
		return result;
	}

// Properties
//

CString GetFileName()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}
void SetFileName(CString propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}
short GetDummy1()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}
void SetDummy1(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}
short GetDummy2()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}
void SetDummy2(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}
BOOL GetHasMatrix()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}
void SetHasMatrix(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}


};
