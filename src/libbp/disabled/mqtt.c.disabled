#include "mqtt.h"
#include <stddef.h>
#include <stdlib.h>
#include "MQTTAsync.h"

#define TOPIC "undefined"

Mqtt*
Mqtt_new()
{
	return NULL;
}

void
connlost(void* context, char* cause)
{
	MQTTAsync client = (MQTTAsync)context;
	MQTTAsync_connectOptions conn_opts =
		MQTTAsync_connectOptions_initializer;
	int rc;
	printf("\nConnection lost\n");
	printf("     cause: %s\n", cause);
	printf("Reconnecting\n");
	conn_opts.keepAliveInterval = 20;
	conn_opts.cleansession = 1;
	if ((rc = MQTTAsync_connect(client, &conn_opts)) !=
	    MQTTASYNC_SUCCESS) {
		printf("Failed to start connect, return code %d\n", rc);
		/* finished = 1; */
	}
}

int
msgarrvd(void* context, char* topicName, int topicLen,
	 MQTTAsync_message* message)
{
	int i;
	char* payloadptr;
	printf("Message arrived\n");
	printf("     topic: %s\n", topicName);
	printf("   message: ");
	payloadptr = message->payload;
	for (i = 0; i < message->payloadlen; i++) {
		putchar(*payloadptr++);
	}
	putchar('\n');
	MQTTAsync_freeMessage(&message);
	MQTTAsync_free(topicName);
	return 1;
}

void
onDisconnect(void* context, MQTTAsync_successData* response)
{
	printf("Successful disconnection\n");
	/* finished = 1; */
}

void
onSend(void* context, MQTTAsync_successData* response)
{
	MQTTAsync client = (MQTTAsync)context;
	MQTTAsync_disconnectOptions opts =
		MQTTAsync_disconnectOptions_initializer;
	int rc;
	printf("Message with token value %d delivery confirmed\n",
	       response->token);
	opts.onSuccess = onDisconnect;
	opts.context = client;
	if ((rc = MQTTAsync_disconnect(client, &opts)) != MQTTASYNC_SUCCESS) {
		printf("Failed to start sendMessage, return code %d\n", rc);
		exit(EXIT_FAILURE);
	}
}

void
onConnectFailure(void* context, MQTTAsync_failureData* response)
{
	printf("Connect failed, rc %d\n", response ? response->code : 0);
	/* finished = 1; */
}

void
onConnect(void* context, MQTTAsync_successData* response)
{
	MQTTAsync client = (MQTTAsync)context;
	MQTTAsync_responseOptions opts =
		MQTTAsync_responseOptions_initializer;
	MQTTAsync_message pubmsg = MQTTAsync_message_initializer;
	int rc;
	printf("Successful connection\n");
	opts.onSuccess = onSend;
	opts.context = client;
	/* pubmsg.payload = PAYLOAD; */
	/* pubmsg.payloadlen = strlen(PAYLOAD); */
	/* pubmsg.qos = QOS; */
	pubmsg.retained = 0;
	/* deliveredtoken = 0; */
	if ((rc = MQTTAsync_sendMessage(client, TOPIC, &pubmsg, &opts)) !=
	    MQTTASYNC_SUCCESS) {
		printf("Failed to start sendMessage, return code %d\n", rc);
		exit(EXIT_FAILURE);
	}
}

void*
connectToMqttServer(Mqtt* mqtt, const char* server)
{

	MQTTAsync client;
	MQTTAsync_connectOptions conn_opts =
		MQTTAsync_connectOptions_initializer;
	MQTTAsync_disconnectOptions disc_opts =
		MQTTAsync_disconnectOptions_initializer;
	MQTTAsync_message pubmsg = MQTTAsync_message_initializer;
	MQTTAsync_token token;
	int rc;
	int ch;

	const char svr[] = "tcp://hilly:1883";
	Mqtt m;
	m.server = svr;
	/* mqtt->server = svr; */
	const char id[] = "myid";
	m.clientId = id;
	/* mqtt->clientId = id; */
	MQTTAsync_create(&client, m.server, m.clientId,
			 MQTTCLIENT_PERSISTENCE_NONE, NULL);
	MQTTAsync_setCallbacks(client, NULL, connlost, msgarrvd, NULL);
	
	return NULL;
	conn_opts.keepAliveInterval = 20;
	conn_opts.cleansession = 1;
	conn_opts.onSuccess = onConnect;
	conn_opts.onFailure = onConnectFailure;
	conn_opts.context = client;
	
	if ((rc = MQTTAsync_connect(client, &conn_opts)) !=
	    MQTTASYNC_SUCCESS) {
		printf("Failed to start connect, return code %d\n", rc);
		exit(EXIT_FAILURE);
	}

	return NULL;
}

void*
subscribe(Mqtt* mqtt, const char* topic)
{
	return NULL;
}

void*
sendMessage(Mqtt* mqtt, const char* topic, const char* message)
{
	return NULL;
}

void*
getMessageWithTimeout(Mqtt* mqtt, const char* timeout)
{
	return NULL;
}

void*
isMessageWaiting(Mqtt* mqtt)
{
	return NULL;
}
