/****************************************************************************
**
** Namespace LMOSACTXLib generated by dumpcpp v5.11.0 using
** C:\Qt\Qt-5.11.0-debug-and-release\bin\dumpcpp {18213698-A9C9-11D1-A220-0060973058F6}
** from the type library C:\Rofin\VISUAL~1\Bin\LMOSActX.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_LMOSACTXLIB_H
#define QAX_DUMPCPP_LMOSACTXLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef LMOSACTXLIB_EXPORT
#define LMOSACTXLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace LMOSACTXLib {

    enum ALARM {
        ALARM_NONE              = 0,
        ALARM_LASER_COMM        = 1,
        ALARM_LASER             = 2,
        ALARM_LASER_POWER       = 3,
        ALARM_PLC_COMM          = 4,
        ALARM_PLC_AXES          = 5,
        ALARM_BEAMSWITCH        = 6,
        ALARM_APERTURE          = 7,
        ALARM_STEPANDREPEAT     = 8,
        ALARM_GALVO             = 9,
        ALARM_MO_EXECUTE        = 10,
        ALARM_MO_RESOURCE       = 11,
        ALARM_UNKNOWN           = 12,
        ALARM_STOP              = 13,
        ALARM_XXDRIVER          = 14,
        ALARM_FIELD_CORR        = 15,
        ALARM_NO_MARK           = 16,
        ALARM_CONTROLLER        = 17,
        ALARM_ASC               = 18,
        ALARM_SHADOW            = 19,
        ALARM_MISSING_AXIS      = 20,
        ALARM_SHUTTER_PROCESS   = 21,
        ALARM_LAST_ALARM        = 22
    };

    enum FrameModeConstants {
        lmosKeepTextHeight      = 3,
        lmosKeepRatio           = 7,
        lmosSizeToFrame         = 1
    };

    enum ImageResultConstants {
        ImageOK                 = 0,
        ImageStop               = 1,
        ImageWarning            = 2,
        ImageError              = 3
    };

    enum InPortConstants {
        Port1B                  = 0,
        Port1C_In               = 1,
        Port1D                  = 2,
        Port1E                  = 3
    };

    enum LMOSActXErrorConstants {
        lmosErrorInvalidLayerName= 1536,
        lmosErrorInvalidVariableIndex= 1537,
        lmosErrorInvalidVariableValue= 1538,
        lmosErrorNoPowerMeasurementInstalled= 1539,
        lmosErrorNoPowerMeasurementWhileMarking= 1540,
        lmosErrorNoMO           = 1541,
        lmosErrorNoTree         = 1542,
        lmosErrorNoDCPcld       = 1543,
        lmosErrorAlarm          = 1544,
        lmosErrorInvalidState   = 1545,
        lmosErrorNoAxis         = 1546,
        lmosErrorImport         = 1547,
        lmosErrorGlobalVars     = 1548,
        lmosErrorCorrection     = 1549,
        lmosErrorSizePos        = 1550,
        lmosErrorMOQPSet        = 1551,
        lmosErrorQPSetProperties= 1648,
        lmosErrorSelectBinAll   = 1649,
        lmosErrorSetOccAll      = 1650
    };

    enum LMOSMOTypeConstants {
        lmosMOUndefined         = 0,
        lmosMORoot              = 22,
        lmosMOGroup             = 16,
        lmosMOMaxMarkingArea    = 19,
        lmosMOGalvoGroupShadow  = 18,
        lmosMOGalvoHeadShadow   = 20,
        lmosMOProxy             = 21,
        lmosMOBarcode           = 1,
        lmosMOMatrixCode        = 8,
        lmosMOBezier            = 2,
        lmosMOBitmap            = 3,
        lmosMOEllipse           = 5,
        lmosMOLogo              = 6,
        lmosMOPolyLine          = 9,
        lmosMORectangle         = 10,
        lmosMOText              = 11,
        lmosMORingText          = 12,
        lmosMOBurst             = 4,
        lmosMOInfoglyph         = 14,
        lmosMOVLMRef            = 13,
        lmosMOMatrix            = 7,
        lmosMOMatrixCell        = 15,
        lmosMOTable             = 17,
        lmosMOMatrixcodeGroup   = 23
    };

    enum LMOSQPSetTypeConstants {
        lmosQPTypeIndividual    = 10,
        lmosQPTypeLocal         = 11,
        lmosQPTypeGlobal        = 12
    };

    enum LMOSSaveAsVersionConstants {
        lmosSaveAsCurrentVersion= 0,
        lmosSaveAsVersion32     = 1,
        lmosSaveAsVersion36     = 2,
        lmosSaveAsVersion46     = 3
    };

    enum MachineCfgCategoryConstants {
        lmosCategorySetup       = 0,
        lmosCategoryGalvo1      = 1,
        lmosCategoryGalvo2      = 2,
        lmosCategoryGalvoControl= 3,
        lmosCategoryAxes        = 4,
        lmosCategoryAperture    = 5,
        lmosCategoryMisc        = 6
    };

    enum MachineCfgValueConstants {
        lmosValueXAxisEndless   = 0,
        lmosValueYAxisEndless   = 1,
        lmosValueZAxisEndless   = 2,
        lmosValueVAxisEndless   = 3,
        lmosValueWAxisEndless   = 4
    };

    enum OrientationConstants {
        lmosLeftTop             = 0,
        lmosCenterTop           = 1,
        lmosRightTop            = 2,
        lmosLeftCenter          = 3,
        lmosCenterCenter        = 4,
        lmosRightCenter         = 5,
        lmosLeftBottom          = 6,
        lmosCenterBottom        = 7,
        lmosRightBottom         = 8
    };

    enum OutPortConstants {
        Port1A                  = 0,
        Port1C                  = 1,
        Port2A                  = 2,
        Port2B                  = 3,
        Port2C                  = 4
    };

    enum ShutterStateConstants {
        StateClosed             = 0,
        StateOpen               = 1,
        StateError              = -1
    };

    enum eAperture {
        SMALL_APERTURE          = 1,
        LARGE_APERTURE          = 2
    };

    enum eAxisErrorType {
        AXIS_ERROR_GENERAL      = 0,
        AXIS_ERROR_NO_REF       = 1,
        AXIS_ERROR_MOVING_ACTIVE= 2,
        AXIS_ERROR_SW_LIMIT_MIN = 3,
        AXIS_ERROR_SW_LIMIT_MAX = 4,
        AXIS_ERROR_HW_LIMIT_MIN = 5,
        AXIS_ERROR_HW_LIMIT_MAX = 6
    };

    enum eAxisParamType {
        VELOCITY                = 2,
        ACCELERATION            = 3,
        DECELERATION            = 4,
        SCALE_USR               = 5,
        SCALE_INC               = 6,
        MIN_VELOCITY            = 19,
        MAX_VELOCITY            = 20,
        SETACTUAL_POSITION      = 32,
        ACCELERATION_MIN        = 33,
        ACCELERATION_MAX        = 34,
        DECELERATION_MIN        = 35,
        DECELERATION_MAX        = 36,
        DECEL_IDENTICAL_ACCEL   = 37
    };

    enum eAxisStateType {
        AXIS_STATE_OPERATING    = 0,
        AXIS_STATE_IN_POSITION  = 1,
        AXIS_STATE_REFERENCED   = 2
    };

    enum eAxisType {
        R_AXIS                  = 9,
        S_AXIS                  = 10,
        T_AXIS                  = 11,
        U_AXIS                  = 12,
        V_AXIS                  = 13,
        W_AXIS                  = 14,
        X_AXIS                  = 15,
        Y_AXIS                  = 16,
        Z_AXIS                  = 17,
        NO_AXIS                 = 30
    };

    enum eDriftModes {
        CALIBRATE               = 0,
        MEASURE                 = 1
    };

    enum eHSType {
        LOCAL_HATCH_SET         = 0,
        GLOBAL_HATCH_SET        = 1
    };

    enum eHatchParamType {
        Unidirectional          = 0,
        Bidirectional           = 1,
        Meandering              = 2,
        ON_THE_FLY              = 3,
        LINE_EXCESS             = 4,
        NO_OUTLINE              = 5,
        Inverse                 = 6,
        AUTO_LINEWIDTH          = 7,
        OPTIMIZE_JUMPS          = 8,
        HATCH_ANGLE             = 9,
        HATCH_ANGLE_STEP        = 10,
        Overlap                 = 11,
        REPEAT_COUNT            = 12,
        DISTANCE_TO_OUTLINE     = 13,
        DISTANCE_TO_OUTLINE_STEP= 14,
        OUTLINE_OFFSET          = 15,
        HATCH_TO_OUTLINE        = 16,
        OUTLINE_CORRECTION      = 17,
        INTERLEAVE              = 18
    };

    enum eHeads {
        HEAD1                   = 0,
        HEAD2                   = 1
    };

    enum eIODirection {
        INBIT                   = 0,
        OUTBIT                  = 1
    };

    enum eJogType {
        JOG_STOP                = 0,
        JOG_NEG_SLOW            = 1,
        JOG_POS_SLOW            = 2,
        JOG_NEG_FAST            = 3,
        JOG_POS_FAST            = 4
    };

    enum eLaserSubStateConstants {
        laserSubStateInstable   = 0,
        laserSubStateStable     = 1,
        laserSubStateConservation= 2,
        laserSubStateWarmup     = 3
    };

    enum eMachineModuleConstants {
        Mod_Nothing             = 0,
        Mod_Mico                = 1,
        Mod_BeamSwitch          = 2,
        Mod_Aperture            = 4,
        Mod_Axes                = 8,
        Mod_Driver              = 16,
        Mod_PowerConfig         = 32,
        Mod_PosHelp             = 64,
        Mod_All                 = 127,
        No_Mico                 = 65536,
        No_BeamSwitch           = 131072,
        No_Aperture             = 262144,
        No_Axes                 = 524288,
        No_Driver               = 1048576,
        No_PowerConfig          = 2097152,
        No_PosHelp              = 4194304
    };

    enum eParamType {
        CURRENT                 = 0,
        FREQUENCY               = 1,
        SPEED                   = 2,
        LIMIT                   = 3,
        STEP                    = 4,
        DELAY_BEAM_ON           = 5,
        DELAY_BEAM_OFF          = 6,
        DELAY_CORNER            = 7,
        DELAY_JUMP_MAX          = 8,
        DELAY_JUMP_MIN          = 9,
        DELAY_SATUR             = 10,
        APERTURE_SIZE           = 11,
        PARAMETER_ID            = 12,
        DELAY_AFTER_GATE        = 13,
        DELAY_OTF_BEGIN         = 14,
        DELAY_OTF_END           = 15,
        JUMP_SPEED              = 16,
        PULSE_WIDTH             = 17,
        LINE_WIDTH              = 18,
        GREY_TABLE              = 19
    };

    enum eQPType {
        LOCAL_QPSET             = 0,
        GLOBAL_QPSET            = 1
    };

    enum eResourceTypes {
        ResFont                 = 0,
        ResLPSet                = 1,
        ResFile                 = 2,
        ResVar                  = 3,
        ResHPSet                = 4
    };

    enum eSignalConstants {
        JobEnd                  = 0,
        MarkingEnd              = 1,
        SystemReady             = 2
    };

    enum eSystemParameterGet {
        SHUTTER_OPEN            = 0,
        WATER_TEMP              = 1,
        CABINET_TEMP            = 2,
        FREQUENCY_ACT           = 3,
        CURRENT_ACT             = 4,
        LASER_STATE             = 5,
        LASER_ACTIVE            = 6,
        WATER_FLOW_MIN_PROG     = 7,
        WATER_FLOW              = 8,
        VALVE_LEVEL             = 9,
        EXT_WATER_VALVE         = 10,
        OPERATION_TIME_SYSTEM   = 11,
        BEAM_ON                 = 12,
        POWER_ACT               = 13,
        OPERATION_TIME_DIODE    = 14
    };

    enum eSystemParameterSet {
        SHUTTER_OPEN_SET        = 0,
        FREQUENCY_ACT_SET       = 1,
        CURRENT_ACT_SET         = 2,
        LASER_ACTIVE_SET        = 3
    };

    enum pgErrorConstants {
        pgNoReferenceMeasurement= 1792,
        pgAlreadyActiveMeasurement= 1793
    };

    enum pgHandleEventConstants {
        pgSystemStart           = 1,
        pgJobLoad               = 2,
        pgStartMarking          = 3
    };

    enum pgResultConstants {
        pgResultNothing         = 0,
        pgResultValidationOk    = 1,
        pgResultValidationFailed= 2,
        pgResultRegulationOk    = 3,
        pgResultCancel          = 4,
        pgResultError           = 5
    };

// forward declarations
    enum eSignalConstants;
    enum ImageResultConstants;
    enum OutPortConstants;
    enum InPortConstants;
    enum eAxisType;
    enum eAxisParamType;
    enum eAxisStateType;
    enum eAxisErrorType;
    enum eJogType;
    enum ShutterStateConstants;
    enum eLaserSubStateConstants;
    enum eResourceTypes;
    enum eMachineModuleConstants;
    enum eSystemParameterGet;
    enum eSystemParameterSet;
    enum eIODirection;
    enum ALARM;
    enum pgResultConstants;
    enum pgErrorConstants;
    enum pgHandleEventConstants;
    enum LMOSActXErrorConstants;
    enum MachineCfgCategoryConstants;
    enum MachineCfgValueConstants;
    enum FrameModeConstants;
    enum OrientationConstants;
    enum eQPType;
    enum eParamType;
    enum LMOSMOTypeConstants;
    enum LMOSQPSetTypeConstants;
    enum eAperture;
    enum eHeads;
    enum eDriftModes;
    enum LMOSSaveAsVersionConstants;
    enum eHSType;
    enum eHatchParamType;
    enum eSignalConstants;
    enum ImageResultConstants;
    enum OutPortConstants;
    enum InPortConstants;
    enum eAxisType;
    enum eAxisParamType;
    enum eAxisStateType;
    enum eAxisErrorType;
    enum eJogType;
    enum ShutterStateConstants;
    enum eLaserSubStateConstants;
    enum eResourceTypes;
    enum eMachineModuleConstants;
    enum eSystemParameterGet;
    enum eSystemParameterSet;
    enum eIODirection;
    enum ALARM;
    enum pgResultConstants;
    class ILayer;
    enum pgErrorConstants;
    enum pgHandleEventConstants;
    enum LMOSActXErrorConstants;
    enum MachineCfgCategoryConstants;
    enum MachineCfgValueConstants;
    enum FrameModeConstants;
    enum OrientationConstants;
    enum eQPType;
    enum eParamType;
    enum LMOSMOTypeConstants;
    enum LMOSQPSetTypeConstants;
    enum eAperture;
    enum eHeads;
    enum eDriftModes;
    enum LMOSSaveAsVersionConstants;
    enum eHSType;
    enum eHatchParamType;
    class IVariable;
    class ITextObject;
    class IComponentBase;
    class IMachineCfgParam;

class LMOSACTXLIB_EXPORT IPowerDlg : public QAxObject
{
public:
    IPowerDlg(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property FailedReason

    property FailedReason
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString FailedReason() const; //Returns the value of FailedReason

    /*
    Property LCUOffset

    property LCUOffset
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant LCUOffset() const; //Returns the value of LCUOffset

    /*
    Property Power

    The power - if there was a successful measurement
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant Power() const; //Returns the value of Power

    /*
    Property Result

    Result of validation or regulation
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::pgResultConstants Result() const; //Returns the value of Result

    /*
    Method GetError

    Method GetError
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetError(QString& description);

    /*
    Method HandleEvent

    Send events for automatic mode
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool HandleEvent(int lEvent);

    /*
    Method Show

    Show power dialog - manual mode
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void Show();

    /*
    Method ShowAutomatic

    method ShowAutomatic
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowAutomatic();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ILayers : public QAxObject
{
public:
    ILayers(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::ILayer* Item(const QString& Name);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ILayer : public QAxObject
{
public:
    ILayer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Exportable

    Exportable property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Exportable() const; //Returns the value of Exportable
    inline void SetExportable(bool value); //Sets the value of the Exportable property

    /*
    Property FocusCorrection

    FocusCorrection property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double FocusCorrection() const; //Returns the value of FocusCorrection
    inline void SetFocusCorrection(double value); //Sets the value of the FocusCorrection property

    /*
    Property HeightZAxis

    HeightZAxis property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double HeightZAxis() const; //Returns the value of HeightZAxis
    inline void SetHeightZAxis(double value); //Sets the value of the HeightZAxis property

    /*
    Property Laserable

    Laserable property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Laserable() const; //Returns the value of Laserable
    inline void SetLaserable(bool value); //Sets the value of the Laserable property

    /*
    Property Name

    Name property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Selectable

    Selectable property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Selectable() const; //Returns the value of Selectable
    inline void SetSelectable(bool value); //Sets the value of the Selectable property

    /*
    Property Visible

    Visible property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property _Name

    _Name property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString _Name() const; //Returns the value of _Name

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT _DLMOSActX : public QAxObject
{
public:
    _DLMOSActX(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property AllComponents

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* AllComponents() const; //Returns the value of AllComponents

    /*
    Property AllMachineCfgParams

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* AllMachineCfgParams() const; //Returns the value of AllMachineCfgParams

    /*
    Property AutoSignalJobEnd

    For more information, see help context 18 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool AutoSignalJobEnd() const; //Returns the value of AutoSignalJobEnd
    inline void SetAutoSignalJobEnd(bool value); //Sets the value of the AutoSignalJobEnd property

    /*
    Property AutoSignalMarkingEnd

    For more information, see help context 19 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool AutoSignalMarkingEnd() const; //Returns the value of AutoSignalMarkingEnd
    inline void SetAutoSignalMarkingEnd(bool value); //Sets the value of the AutoSignalMarkingEnd property

    /*
    Property Axis

    For more information, see help context 20 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Axis() const; //Returns the value of Axis

    /*
    Property Dummy1

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Dummy1() const; //Returns the value of Dummy1
    inline void SetDummy1(int value); //Sets the value of the Dummy1 property

    /*
    Property Dummy2

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Dummy2() const; //Returns the value of Dummy2
    inline void SetDummy2(int value); //Sets the value of the Dummy2 property

    /*
    Property FileName

    For more information, see help context 29 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property GlobalVariables

    For more information, see help context 85 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* GlobalVariables() const; //Returns the value of GlobalVariables

    /*
    Property HasMatrix

    For more information, see help context 41 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool HasMatrix() const; //Returns the value of HasMatrix
    inline void SetHasMatrix(bool value); //Sets the value of the HasMatrix property

    /*
    Property Layers

    For more information, see help context 46 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Layers() const; //Returns the value of Layers

    /*
    Property LocalVariables

    For more information, see help context 85 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* LocalVariables() const; //Returns the value of LocalVariables

    /*
    Property MachineCfg

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* MachineCfg() const; //Returns the value of MachineCfg

    /*
    Property PowerDlg

    For more information, see help context 57 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* PowerDlg() const; //Returns the value of PowerDlg

    /*
    Property SuppressAutoRedraw

    For more information, see help context 81 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SuppressAutoRedraw() const; //Returns the value of SuppressAutoRedraw
    inline void SetSuppressAutoRedraw(bool value); //Sets the value of the SuppressAutoRedraw property

    /*
    Property VLMBuildLevel

    For more information, see help context 87 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString VLMBuildLevel() const; //Returns the value of VLMBuildLevel

    /*
    Property VLMVersion

    For more information, see help context 88 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString VLMVersion() const; //Returns the value of VLMVersion

    /*
    Property VariableCnt

    For more information, see help context 86 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int VariableCnt() const; //Returns the value of VariableCnt

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void AboutBox();

    /*
    Method ActivateZoomWindow

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ActivateZoomWindow(bool newState);

    /*
    Method AddGlobalQPSet

    For more information, see help context 130 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void AddGlobalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY);

    /*
    Method AddLocalQPSet

    For more information, see help context 132 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void AddLocalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY);

    /*
    Method BeamOn

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void BeamOn(bool bOn);

    /*
    Method CancelJob

    For more information, see help context 21 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool CancelJob();

    /*
    Method ClearAlarms

    For more information, see help context 146 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ClearAlarms();

    /*
    Method ClearLayout

    For more information, see help context 22 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ClearLayout();

    /*
    Method DrawingAngleOffset

    For more information, see help context 23 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingAngleOffset(double dAngle);

    /*
    Method DrawingGetDimension

    For more information, see help context 24 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingGetDimension(double& dWidth, double& dHeight);

    /*
    Method DrawingGetPosValues

    For more information, see help context 25 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingGetPosValues(double& dX, double& dY, double& dAngle);

    /*
    Method DrawingPosOffset

    For more information, see help context 26 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingPosOffset(double dX, double dY);

    /*
    Method DrawingSetDimension

    For more information, see help context 157 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingSetDimension(double dWidth, double dHeight);

    /*
    Method DrawingSetPosValues

    For more information, see help context 27 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingSetPosValues(double dX, double dY, double dAngle);

    /*
    Method DriftCorr

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void DriftCorr(double lambda1, double lambda2, double deltax, double deltay, int hindex);

    /*
    Method DriftCorrInternal

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void DriftCorrInternal(LMOSACTXLib::eHeads Head, LMOSACTXLib::eDriftModes mode);

    /*
    Method ExportAsLogo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ExportAsLogo(const QString& LogoName, bool ExportEllipsesAsPolylines, int IncrementsPerFullEllipse);

    /*
    Method ExportPl0

    For more information, see help context 138 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ExportPl0(const QString& PL0FileName, bool bShowInitDlg);

    /*
    Method ExportVISFile

    For more information, see help context 28 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ExportVISFile(const QString& VISFileName);

    /*
    Method FileName2

    For more information, see help context 29 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool FileName2(const QString& FName);

    /*
    Method GetAlarms

    For more information, see help context 145 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetAlarms();

    /*
    Method GetAxisUsedInVLM

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis);

    /*
    Method GetBackgroundProperties

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetBackgroundProperties(const QString& MOName, bool& ShowFrame, bool& DrawFrame, bool& BackgroundBitmap, QString& BitmapName, bool& BackgroundColor, int& Color);

    /*
    Method GetDimension

    For more information, see help context 30 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetDimension(const QString& ObjectName, double& dWidth, double& dHeight);

    /*
    Method GetGlobalHatchSetNames

    For more information, see help context 179 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetGlobalHatchSetNames();

    /*
    Method GetGlobalQPSet

    For more information, see help context 39 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetGlobalQPSet(const QString& QPSetName, double& CURRENT, int& SPEED, int& FREQUENCY);

    /*
    Method GetGlobalQPSetNames

    For more information, see help context 135 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetGlobalQPSetNames();

    /*
    Method GetHatchParam

    For more information, see help context 180 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, QVariant& varVal);

    /*
    Method GetHatchProperties

    For more information, see help context 188 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetHatchProperties(const QString& MOName, bool& Unidirectional, bool& Bidirectional, bool& Meandering, bool& OnTheFly, double& LineExcess, bool& NoOutline, bool& Inverse, bool& OutlineCorrection, bool& AutoLineWitdth, bool& OptimizeJumps, double& HatchAngle, double& FromOutline, double& Overlap);

    /*
    Method GetIODefinitions

    For more information, see help context 177 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetIODefinitions(LMOSACTXLib::eIODirection eDir, const QVariant& bitfunction);

    /*
    Method GetLayerProperties

    For more information, see help context 186 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetLayerProperties(const QString& MOName, QString& LayerName);

    /*
    Method GetLocalQPSetNames

    For more information, see help context 136 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetLocalQPSetNames();

    /*
    Method GetLogo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetLogo(const QString& ObjectName);

    /*
    Method GetLogoFilesPath

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetLogoFilesPath();

    /*
    Method GetLogoProperties

    For more information, see help context 187 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetLogoProperties(const QString& LogoName, QString& FileName, bool& OriginalSize, double& xScale, double& yScale, double& Slant, bool& Hatch);

    /*
    Method GetMODescription

    For more information, see help context 36 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetMODescription(const QString& MOName);

    /*
    Method GetMONames

    For more information, see help context 137 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetMONames();

    /*
    Method GetMOQPSet

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMOQPSet(const QString& MOName, QString& QPSetName, LMOSQPSetTypeConstants& QPSetType);

    /*
    Method GetMOType

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSMOTypeConstants GetMOType(const QString& MOName);

    /*
    Method GetMarkingFilesPath

    For more information, see help context 31 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetMarkingFilesPath();

    /*
    Method GetMatrixCellAmount

    For more information, see help context 32 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetMatrixCellAmount(const QString& MatrixName);

    /*
    Method GetMatrixCellProperties

    For more information, see help context 182 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixCellProperties(const QString& MatrixName, double& Width, double& Height, double& XOffset, double& YOffset, double& XShift, double& YShift, double& Orientation);

    /*
    Method GetMatrixCustomType

    For more information, see help context 34 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetMatrixCustomType(const QString& MatrixName);

    /*
    Method GetMatrixGroupData

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixGroupData(const QString& MatrixName, int Index, double& X, int& xElements, double& Y, int& yElements);

    /*
    Method GetMatrixGroupProperties

    For more information, see help context 184 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixGroupProperties(const QString& MatrixName, double& X, int& xElements, double& Y, int& yElements);

    /*
    Method GetMatrixInterleaveProperties

    For more information, see help context 183 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixInterleaveProperties(const QString& MatrixName, double& X, double& Y);

    /*
    Method GetMatrixMaxBinCount

    For more information, see help context 35 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetMatrixMaxBinCount(const QString& MatrixName);

    /*
    Method GetMatrixOptionProperties

    For more information, see help context 185 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixOptionProperties(const QString& MatrixName, QString& CustomType, bool& ColoredCell, bool& ShowReferenceCell, bool& BinLayoutStatic, bool& BinLayoutDynamic, int& maxBin, bool& Multiplexed);

    /*
    Method GetMatrixRowsAndColsCnt

    For more information, see help context 33 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixRowsAndColsCnt(const QString& MatrixName, int& RowCnt, int& ColCnt);

    /*
    Method GetMissingResources

    For more information, see help context 158 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetMissingResources(QVariant& list);

    /*
    Method GetNoMarkMOCount

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetNoMarkMOCount();

    /*
    Method GetPosValues

    For more information, see help context 37 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetPosValues(const QString& ObjectName, double& dX, double& dY, double& dAngle);

    /*
    Method GetPosValuesAbs

    For more information, see help context 38 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetPosValuesAbs(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle);

    /*
    Method GetQPSetProperties

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetQPSetProperties(const QString& QPSetName, LMOSACTXLib::LMOSQPSetTypeConstants QPSetType, const QString& MOName, QVariant& PropertyNames, QVariant& PropertyValues);

    /*
    Method GetQualityParam

    For more information, see help context 139 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, QVariant& varVal);

    /*
    Method GetResources

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetResources(QVariant& list);

    /*
    Method GetRuntimeHeadOffset

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetRuntimeHeadOffset(double& X, double& Y, int hindex);

    /*
    Method GetShutterState

    For more information, see help context 155 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline ShutterStateConstants GetShutterState();

    /*
    Method GetSignal

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSignal(LMOSACTXLib::eSignalConstants Signal);

    /*
    Method GetSizePosProperties

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSizePosProperties(const QString& MOName, double& PositionX, double& PositionY, double& SizeDX, double& SizeDY, double& Angle, bool& PreserveAspectRatio, bool& FlipHorizontal, bool& FlipVertical, OrientationConstants& RefPoint);

    /*
    Method GetSurfaceRadius

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSurfaceRadius(double& radius);

    /*
    Method GetSurfaceRefPoint

    For more information, see help context 172 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSurfaceRefPoint(double& RefX, double& RefY, double& RefZ);

    /*
    Method GetSurfaceVector

    For more information, see help context 173 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSurfaceVector(double& VecX, double& VecY, double& VecZ);

    /*
    Method GetSystemParameter

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSystemParameter(LMOSACTXLib::eSystemParameterGet partype, QVariant& varVal);

    /*
    Method GetText

    For more information, see help context 40 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetText(const QString& ObjectName);

    /*
    Method ImportDXFFile

    For more information, see help context 149 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportDXFFile(const QString& DXFFileName);

    /*
    Method ImportDXFFile2

    For more information, see help context 150 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ImportDXFFile2(const QString& DXFFileName);

    /*
    Method ImportLogoFile

    For more information, see help context 190 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportLogoFile(const QString& XMLFileName);

    /*
    Method ImportLogoFile2

    For more information, see help context 191 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportLogoFile2(const QString& XMLFileName);

    /*
    Method ImportPSFile

    For more information, see help context 170 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportPSFile(const QString& PSFileName);

    /*
    Method ImportPSFile2

    For more information, see help context 171 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ImportPSFile2(const QString& PSFileName);

    /*
    Method ImportXMLFile

    For more information, see help context 42 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportXMLFile(const QString& XMLFileName);

    /*
    Method ImportXMLFile2

    For more information, see help context 151 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ImportXMLFile2(const QString& XMLFileName);

    /*
    Method InitMachine

    For more information, see help context 44 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool InitMachine();

    /*
    Method InitMachineEx

    For more information, see help context 44 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool InitMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask);

    /*
    Method IsFeatureLicensed

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsFeatureLicensed(const QString& feature);

    /*
    Method IsMOName

    For more information, see help context 43 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int IsMOName(const QString& MOName);

    /*
    Method JobLoaded

    For more information, see help context 45 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool JobLoaded();

    /*
    Method Layer

    For more information, see help context 46 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Layer(const QString& Name);

    /*
    Method LoadInclinedPlaneFCR

    For more information, see help context 127 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool LoadInclinedPlaneFCR(double dAlpha, double dBeta, double dBeamOrigin, double dPlaneIntersectionOffset, int lPlaneIntersectionOrientation, int lHeadIndex);

    /*
    Method LoadJob

    For more information, see help context 47 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool LoadJob();

    /*
    Method LoadXML

    For more information, see help context 152 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool LoadXML(const QString& XMLString);

    /*
    Method LoadXML2

    For more information, see help context 153 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void LoadXML2(const QString& XMLString);

    /*
    Method MatrixAssignBinLayout

    For more information, see help context 48 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixAssignBinLayout(const QString& MatrixName, int BinNum, const QString& LayoutName);

    /*
    Method MatrixAssignBinText

    For more information, see help context 49 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixAssignBinText(const QString& MatrixName, int BinNum, const QString& ObjectName, const QString& BinText);

    /*
    Method MatrixQueryBin

    For more information, see help context 50 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int MatrixQueryBin(const QString& MatrixName, int CellIndex);

    /*
    Method MatrixQueryBinText

    For more information, see help context 51 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString MatrixQueryBinText(const QString& MatrixName, int BinNum, const QString& ObjectName);

    /*
    Method MatrixQueryCellsPerPart

    For more information, see help context 52 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixQueryCellsPerPart(const QString& MatrixName, int PartIndex, int& CellStartIndex, int& CellCnt);

    /*
    Method MatrixQueryPartCnt

    For more information, see help context 53 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixQueryPartCnt(const QString& MatrixName, int& PartCnt);

    /*
    Method MatrixSelectBin

    For more information, see help context 54 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixSelectBin(const QString& MatrixName, int CellIndex, int BinNum);

    /*
    Method MatrixSelectBinAll

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixSelectBinAll(const QString& MatrixName, QVariant& BinValues);

    /*
    Method MoveA

    For more information, see help context 55 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MoveA(const QString& ObjectName, double dX, double dY);

    /*
    Method PLCCommand

    For more information, see help context 56 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool PLCCommand(const QString& ID1, const QString& ID2, const QString& Command);

    /*
    Method PLCCommandEx

    For more information, see help context 124 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool PLCCommandEx(const QString& ID1, const QString& ID2, const QVariant& Command);

    /*
    Method ReadByte

    For more information, see help context 58 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReadByte(LMOSACTXLib::InPortConstants Port, int bMask, int& InByte);

    /*
    Method ReadIOBit

    For more information, see help context 165 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReadIOBit(const QVariant& bitfunction, QVariant& Result);

    /*
    Method RedrawLayout

    For more information, see help context 59 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RedrawLayout();

    /*
    Method RemoveGlobalQPSet

    For more information, see help context 131 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RemoveGlobalQPSet(const QString& Name);

    /*
    Method RemoveLocalQPSet

    For more information, see help context 133 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RemoveLocalQPSet(const QString& Name);

    /*
    Method ReplaceDrawing

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReplaceDrawing(const QString& FileName);

    /*
    Method ReplaceGlobalQPSet

    For more information, see help context 60 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReplaceGlobalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName);

    /*
    Method ReplaceLocalQPSet

    For more information, see help context 61 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReplaceLocalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName);

    /*
    Method RotateA

    For more information, see help context 62 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool RotateA(const QString& ObjectName, double dAngle);

    /*
    Method RotateView

    Rotate preview window by Angle
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RotateView(double Angle);

    /*
    Method Save

    For more information, see help context 63 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Save(const QString& FileName);

    /*
    Method SaveAsVersion

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SaveAsVersion(const QString& FileName, LMOSACTXLib::LMOSSaveAsVersionConstants SaveVersion);

    /*
    Method SaveGlobalHatchSets

    For more information, see help context 178 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SaveGlobalHatchSets();

    /*
    Method SaveGlobalQPSets

    For more information, see help context 134 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SaveGlobalQPSets();

    /*
    Method SaveImage

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SaveImage(int resx, int resy, const QString& FileName);

    /*
    Method SaveImageWithRuler

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SaveImageWithRuler(int resx, int resy, const QString& FileName);

    /*
    Method SelectShadow

    For more information, see help context 176 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SelectShadow(int ShadowIndex);

    /*
    Method SelectSingleStep

    For more information, see help context 65 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SelectSingleStep(int StepIndex);

    /*
    Method SetAxisUsedInVLM

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis, bool Value);

    /*
    Method SetDimension

    For more information, see help context 122 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetDimension(const QString& ObjectName, double dWidth, double dHeight);

    /*
    Method SetGlobalQPSet

    For more information, see help context 64 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetGlobalQPSet(const QString& QPSetName, double CURRENT, int SPEED, int FREQUENCY, bool bSave);

    /*
    Method SetHatchParam

    For more information, see help context 181 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, const QVariant& varVal);

    /*
    Method SetHatchProperties

    For more information, see help context 189 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetHatchProperties(const QString& MOName, bool Unidirectional, bool Bidirectional, bool Meandering, bool OnTheFly, double LineExcess, bool NoOutline, bool Inverse, bool OutlineCorrection, bool AutoLineWidth, bool OptimizeJumps, double HatchAngle, double FromOutline, double Overlap);

    /*
    Method SetLaserable

    For more information, see help context 66 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetLaserable(const QString& MOName, bool bFlag);

    /*
    Method SetLogo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetLogo(const QString& ObjectName, const QString& VariableValue);

    /*
    Method SetMODescription

    For more information, see help context 72 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMODescription(const QString& MOName, const QString& description);

    /*
    Method SetMOLayer

    For more information, see help context 169 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMOLayer(const QString& MOName, const QString& LayerName);

    /*
    Method SetMatrixCellAngle

    For more information, see help context 67 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellAngle(const QString& MatrixName, double dAngle);

    /*
    Method SetMatrixCellOccupation

    For more information, see help context 68 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellOccupation(const QString& MatrixName, int iCellIndex, bool IsOccupied);

    /*
    Method SetMatrixCellOccupationAll

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellOccupationAll(const QString& MatrixName, QVariant& OccValues);

    /*
    Method SetMatrixCellOffset

    For more information, see help context 69 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellOffset(const QString& MatrixName, int iCellIndex, double OffX, double OffY, double OffPhi);

    /*
    Method SetMatrixMaxBinCount

    For more information, see help context 70 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixMaxBinCount(const QString& MatrixName, int MaxBinCount);

    /*
    Method SetMatrixRefCell

    For more information, see help context 71 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixRefCell(const QString& MatrixName, int iIndex, bool bDrawRefCellOnly);

    /*
    Method SetPosValues

    For more information, see help context 73 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetPosValues(const QString& ObjectName, double dX, double dY, double dAngle);

    /*
    Method SetQualityParam

    For more information, see help context 140 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, const QVariant& varVal, bool bSave);

    /*
    Method SetRuntimeHeadOffset

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetRuntimeHeadOffset(double X, double Y, int hindex);

    /*
    Method SetSignal

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetSignal(LMOSACTXLib::eSignalConstants Signal, bool Value);

    /*
    Method SetSurfaceRadius

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSurfaceRadius(double radius);

    /*
    Method SetSurfaceRefPoint

    For more information, see help context 174 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSurfaceRefPoint(double RefX, double RefY, double RefZ);

    /*
    Method SetSurfaceVector

    For more information, see help context 175 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSurfaceVector(double VecX, double VecY, double VecZ);

    /*
    Method SetSystemParameter

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSystemParameter(LMOSACTXLib::eSystemParameterSet partype, const QVariant& varVal);

    /*
    Method SetText

    For more information, see help context 74 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetText(const QString& ObjectName, const QString& VariableValue);

    /*
    Method ShowMarkingArea

    For more information, see help context 75 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMarkingArea();

    /*
    Method ShowMarkingAreaZoom

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMarkingAreaZoom();

    /*
    Method ShowMatrixCell

    For more information, see help context 76 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMatrixCell();

    /*
    Method ShowMatrixCell2

    For more information, see help context 77 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMatrixCell2(const QString& MatrixName);

    /*
    Method ShowMatrixCellZoom

    For more information, see help context 141 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMatrixCellZoom();

    /*
    Method ShowWholeDrawing

    For more information, see help context 78 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowWholeDrawing();

    /*
    Method ShowZoomWindow

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ShowZoomWindow(int topLeftX, int topLeftY, int bottomRightX, int bottomRightY);

    /*
    Method SplitDrawing

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SplitDrawing(double offset, double Overlap);

    /*
    Method StartMarking

    For more information, see help context 79 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool StartMarking();

    /*
    Method StartPosHelp

    For more information, see help context 125 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StartPosHelp(const QString& ObjectName);

    /*
    Method StartPosHelpLast

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StartPosHelpLast(const QString& ObjectName);

    /*
    Method StdCorr

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StdCorr(int hindex);

    /*
    Method StopMarking

    For more information, see help context 80 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool StopMarking();

    /*
    Method StopPosHelp

    For more information, see help context 126 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StopPosHelp();

    /*
    Method SynchronizeMarking

    For more information, see help context 82 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SynchronizeMarking();

    /*
    Method TTLFieldCorr

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLFieldCorr(const QString& FileName, int Action, int Head);

    /*
    Method TTLGetAbsPosValues

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLGetAbsPosValues(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle);

    /*
    Method TTLPxCamera

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLPxCamera(double dX, double dY);

    /*
    Method TTLPxLaser

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLPxLaser(double dX, double dY);

    /*
    Method TermMachine

    For more information, see help context 83 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TermMachine();

    /*
    Method TermMachineEx

    For more information, see help context 83 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TermMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask);

    /*
    Method TextObjects

    For more information, see help context 84 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* TextObjects(const QString& MOName);

    /*
    Method Variable

    For more information, see help context 85 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Variable(int Index);

    /*
    Method WaitOnByte

    For more information, see help context 89 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WaitOnByte(LMOSACTXLib::InPortConstants Port, int bMask, int bData, int lTimeOut);

    /*
    Method WaitOnIOBit

    For more information, see help context 166 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WaitOnIOBit(const QVariant& bitfunction, const QVariant& values, int timeout);

    /*
    Method WriteByte

    For more information, see help context 90 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WriteByte(LMOSACTXLib::OutPortConstants Port, int bMask, int bData);

    /*
    Method WriteIOBit

    For more information, see help context 167 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WriteIOBit(const QVariant& bitfunction, const QVariant& values);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DLMOSActXEvents

class LMOSACTXLIB_EXPORT IResDesc : public QAxObject
{
public:
    IResDesc(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property ResName

    property ResName
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ResName() const; //Returns the value of ResName

    /*
    Property ResType

    property ResType
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::eResourceTypes ResType() const; //Returns the value of ResType

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IAxis : public QAxObject
{
public:
    IAxis(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AxisAvailable

    Is the axis available
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool AxisAvailable(LMOSACTXLib::eAxisType eAxis);

    /*
    Method GetAxisParameter

    Request an axis parameter of the selected axis.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam);

    /*
    Method GetPos

    GetPos method, requests the actual position of an axis in the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPos(LMOSACTXLib::eAxisType eAxis);

    /*
    Method GetPos

    GetPos method, requests the actual position of an axis in the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPos(LMOSACTXLib::eAxisType eAxis, bool bDoRequest);

    /*
    Method GetPosW

    GetPosW method, request the actual W axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosW();

    /*
    Method GetPosX

    GetPosX method, request the actual X axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosX();

    /*
    Method GetPosY

    GetPosY method, request the actual Y axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosY();

    /*
    Method GetPosZ

    GetPosZ method, request the actual Z axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosZ();

    /*
    Method Inverted

    Invert the axis move direction
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Inverted(LMOSACTXLib::eAxisType eAxis);

    /*
    Method Jog

    Jog method, moves an axis with the selected speed in the selected direction, or stops it.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void Jog(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eJogType eJog);

    /*
    Method MoveAxes

    MoveAxes method, move axis/axes to the position(s) set by NewPos call(s)
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveAxes();

    /*
    Method MoveAxisAsync

    Starts moving an axis immediately, result is fired with MoveAxisAsyncDoneEvent.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveAxisAsync(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos);

    /*
    Method MoveEnd

    MoveEnd method, after MoveAxesEvent your application signals In Position with this call. Method will return after all moves done.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveEnd(int lResult);

    /*
    Method MoveHome

    MoveHome method, move axis/axes to the home position(s) set in Machine Configuration.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveHome();

    /*
    Method NewPos

    NewPos method, sets a new position of an axis in the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void NewPos(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos);

    /*
    Method NewReference

    NewReference method, marks an axis to be referenced with ReferenceAxes command.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void NewReference(LMOSACTXLib::eAxisType eAxis);

    /*
    Method ReferenceAxes

    ReferenceAxes method, reference all selected axes independent if already referenced or not.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ReferenceAxes();

    /*
    Method SetAxisParameter

    Change an axis parameter of the selected axis.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam, const QVariant& val);

    /*
    Method SetInverted
    */
    inline void SetInverted(LMOSACTXLib::eAxisType eAxis, bool rhs);

    /*
    Method StopAxes

    StopAxes method, stops axis/axes immediately at their actual position(s).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StopAxes();

    /*
    Method StopAxis

    StopAxis method, stops the selected axis immediately at their actual position.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StopAxis(LMOSACTXLib::eAxisType eAxis);

    /*
    Method TAW

    TAW method, move W axis absolute with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TAW(double W);

    /*
    Method TAXY

    TAXY method, move X and Y axis absolute with the configured VLM DLL..
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TAXY(double X, double Y);

    /*
    Method TAZ

    TAZ method, move Z axis absolute with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TAZ(double Z);

    /*
    Method TRW

    TRW method, move W axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRW(double W);

    /*
    Method TRX

    TRX method, move X axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRX(double X);

    /*
    Method TRXY

    TRXY method, move X and Y axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRXY(double X, double Y);

    /*
    Method TRY

    TRY method, move Y axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRY(double Y);

    /*
    Method TRZ

    TRZ method, move Z axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRZ(double Z);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IAxisEvents

class LMOSACTXLIB_EXPORT IMachineCfg : public QAxObject
{
public:
    IMachineCfg(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method GetValue

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetValue(int categoryId, int valueId);

    /*
    Method SetValue

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetValue(int categoryId, int valueId, const QVariant& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IVariable : public QAxObject
{
public:
    IVariable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Length

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Length() const; //Returns the value of Length

    /*
    Property Name

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Value

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Value() const; //Returns the value of Value
    inline void SetValue(const QString& value); //Sets the value of the Value property

    /*
    Property _Value

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString _Value() const; //Returns the value of _Value
    inline void set_Value(const QString& value); //Sets the value of the _Value property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IVariables : public QAxObject
{
public:
    IVariables(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::IVariable* Item(const QString& Name);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ITextObject : public QAxObject
{
public:
    ITextObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Alignment

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Alignment() const; //Returns the value of Alignment
    inline void SetAlignment(int value); //Sets the value of the Alignment property

    /*
    Property CharSpace

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double CharSpace() const; //Returns the value of CharSpace
    inline void SetCharSpace(double value); //Sets the value of the CharSpace property

    /*
    Property Font

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Font() const; //Returns the value of Font
    inline void SetFont(const QString& value); //Sets the value of the Font property

    /*
    Property FrameMode

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int FrameMode() const; //Returns the value of FrameMode
    inline void SetFrameMode(int value); //Sets the value of the FrameMode property

    /*
    Property Height

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property ID

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int ID() const; //Returns the value of ID

    /*
    Property IsCrossfree

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsCrossfree() const; //Returns the value of IsCrossfree
    inline void SetIsCrossfree(bool value); //Sets the value of the IsCrossfree property

    /*
    Property IsFixedSize

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsFixedSize() const; //Returns the value of IsFixedSize
    inline void SetIsFixedSize(bool value); //Sets the value of the IsFixedSize property

    /*
    Property IsHatched

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsHatched() const; //Returns the value of IsHatched
    inline void SetIsHatched(bool value); //Sets the value of the IsHatched property

    /*
    Property Italic

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double Italic() const; //Returns the value of Italic
    inline void SetItalic(double value); //Sets the value of the Italic property

    /*
    Property LineSpace

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double LineSpace() const; //Returns the value of LineSpace
    inline void SetLineSpace(double value); //Sets the value of the LineSpace property

    /*
    Property Name

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Ratio

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double Ratio() const; //Returns the value of Ratio
    inline void SetRatio(double value); //Sets the value of the Ratio property

    /*
    Property Text

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ITextObjects : public QAxObject
{
public:
    ITextObjects(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::ITextObject* Item(int ID);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IComponentBase : public QAxObject
{
public:
    IComponentBase(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property ClassInfo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ClassInfo() const; //Returns the value of ClassInfo

    /*
    Property ClassName

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ClassName() const; //Returns the value of ClassName

    /*
    Property GenericName

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GenericName() const; //Returns the value of GenericName

    /*
    Property ID

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int ID() const; //Returns the value of ID

    /*
    Method GetAttribute

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetAttribute(const QString& attributeName, bool sync);

    /*
    Method SetAttribute

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetAttribute(const QString& attributeName, const QVariant& val, bool sync);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IComponentBases : public QAxObject
{
public:
    IComponentBases(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::IComponentBase* Item(int ID);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IMachineCfgParam : public QAxObject
{
public:
    IMachineCfgParam(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Category

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Category() const; //Returns the value of Category

    /*
    Property Name

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Unit

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Unit() const; //Returns the value of Unit

    /*
    Property Value

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant Value() const; //Returns the value of Value

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT IMachineCfgParams : public QAxObject
{
public:
    IMachineCfgParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::IMachineCfgParam* Item(int ID);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IPowerDlgEvents

// Actual coclasses
class LMOSACTXLIB_EXPORT Layer : public QAxObject
{
public:
    Layer(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Layer(ILayer *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Exportable

    Exportable property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Exportable() const; //Returns the value of Exportable
    inline void SetExportable(bool value); //Sets the value of the Exportable property

    /*
    Property FocusCorrection

    FocusCorrection property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double FocusCorrection() const; //Returns the value of FocusCorrection
    inline void SetFocusCorrection(double value); //Sets the value of the FocusCorrection property

    /*
    Property HeightZAxis

    HeightZAxis property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double HeightZAxis() const; //Returns the value of HeightZAxis
    inline void SetHeightZAxis(double value); //Sets the value of the HeightZAxis property

    /*
    Property Laserable

    Laserable property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Laserable() const; //Returns the value of Laserable
    inline void SetLaserable(bool value); //Sets the value of the Laserable property

    /*
    Property Name

    Name property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Selectable

    Selectable property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Selectable() const; //Returns the value of Selectable
    inline void SetSelectable(bool value); //Sets the value of the Selectable property

    /*
    Property Visible

    Visible property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Visible() const; //Returns the value of Visible
    inline void SetVisible(bool value); //Sets the value of the Visible property

    /*
    Property _Name

    _Name property
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString _Name() const; //Returns the value of _Name

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT Layers : public QAxObject
{
public:
    Layers(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Layers(ILayers *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::ILayer* Item(const QString& Name);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ResDesc : public QAxObject
{
public:
    ResDesc(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl(QStringLiteral("{e61138e5-6b1b-4fa0-9c5b-5e10de8e543a}"));
    }

    ResDesc(IResDesc *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ObjectID

    property ObjectID
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int ObjectID() const; //Returns the value of ObjectID

    /*
    Property ObjectName

    property ObjectName
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ObjectName() const; //Returns the value of ObjectName

    /*
    Property ResName

    property ResName
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ResName() const; //Returns the value of ResName

    /*
    Property ResType

    property ResType
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::eResourceTypes ResType() const; //Returns the value of ResType

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT Axis : public QAxObject
{
public:
    Axis(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Axis(IAxis *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AxisAvailable

    Is the axis available
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool AxisAvailable(LMOSACTXLib::eAxisType eAxis);

    /*
    Method GetAxisParameter

    Request an axis parameter of the selected axis.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam);

    /*
    Method GetPos

    GetPos method, requests the actual position of an axis in the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPos(LMOSACTXLib::eAxisType eAxis);

    /*
    Method GetPos

    GetPos method, requests the actual position of an axis in the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPos(LMOSACTXLib::eAxisType eAxis, bool bDoRequest);

    /*
    Method GetPosW

    GetPosW method, request the actual W axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosW();

    /*
    Method GetPosX

    GetPosX method, request the actual X axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosX();

    /*
    Method GetPosY

    GetPosY method, request the actual Y axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosY();

    /*
    Method GetPosZ

    GetPosZ method, request the actual Z axis position (in mm).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double GetPosZ();

    /*
    Method Inverted

    Invert the axis move direction
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Inverted(LMOSACTXLib::eAxisType eAxis);

    /*
    Method Jog

    Jog method, moves an axis with the selected speed in the selected direction, or stops it.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void Jog(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eJogType eJog);

    /*
    Method MoveAxes

    MoveAxes method, move axis/axes to the position(s) set by NewPos call(s)
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveAxes();

    /*
    Method MoveAxisAsync

    Starts moving an axis immediately, result is fired with MoveAxisAsyncDoneEvent.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveAxisAsync(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos);

    /*
    Method MoveEnd

    MoveEnd method, after MoveAxesEvent your application signals In Position with this call. Method will return after all moves done.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveEnd(int lResult);

    /*
    Method MoveHome

    MoveHome method, move axis/axes to the home position(s) set in Machine Configuration.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void MoveHome();

    /*
    Method NewPos

    NewPos method, sets a new position of an axis in the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void NewPos(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos);

    /*
    Method NewReference

    NewReference method, marks an axis to be referenced with ReferenceAxes command.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void NewReference(LMOSACTXLib::eAxisType eAxis);

    /*
    Method ReferenceAxes

    ReferenceAxes method, reference all selected axes independent if already referenced or not.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ReferenceAxes();

    /*
    Method SetAxisParameter

    Change an axis parameter of the selected axis.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam, const QVariant& val);

    /*
    Method SetInverted
    */
    inline void SetInverted(LMOSACTXLib::eAxisType eAxis, bool rhs);

    /*
    Method StopAxes

    StopAxes method, stops axis/axes immediately at their actual position(s).
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StopAxes();

    /*
    Method StopAxis

    StopAxis method, stops the selected axis immediately at their actual position.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StopAxis(LMOSACTXLib::eAxisType eAxis);

    /*
    Method TAW

    TAW method, move W axis absolute with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TAW(double W);

    /*
    Method TAXY

    TAXY method, move X and Y axis absolute with the configured VLM DLL..
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TAXY(double X, double Y);

    /*
    Method TAZ

    TAZ method, move Z axis absolute with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TAZ(double Z);

    /*
    Method TRW

    TRW method, move W axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRW(double W);

    /*
    Method TRX

    TRX method, move X axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRX(double X);

    /*
    Method TRXY

    TRXY method, move X and Y axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRXY(double X, double Y);

    /*
    Method TRY

    TRY method, move Y axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRY(double Y);

    /*
    Method TRZ

    TRZ method, move Z axis relative with the configured VLM DLL.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void TRZ(double Z);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT Variable : public QAxObject
{
public:
    Variable(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Variable(IVariable *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Length

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Length() const; //Returns the value of Length

    /*
    Property Name

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Value

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Value() const; //Returns the value of Value
    inline void SetValue(const QString& value); //Sets the value of the Value property

    /*
    Property _Value

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString _Value() const; //Returns the value of _Value
    inline void set_Value(const QString& value); //Sets the value of the _Value property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT Variables : public QAxObject
{
public:
    Variables(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    Variables(IVariables *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::IVariable* Item(const QString& Name);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT TextObject : public QAxObject
{
public:
    TextObject(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    TextObject(ITextObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Alignment

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Alignment() const; //Returns the value of Alignment
    inline void SetAlignment(int value); //Sets the value of the Alignment property

    /*
    Property CharSpace

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double CharSpace() const; //Returns the value of CharSpace
    inline void SetCharSpace(double value); //Sets the value of the CharSpace property

    /*
    Property Font

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Font() const; //Returns the value of Font
    inline void SetFont(const QString& value); //Sets the value of the Font property

    /*
    Property FrameMode

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int FrameMode() const; //Returns the value of FrameMode
    inline void SetFrameMode(int value); //Sets the value of the FrameMode property

    /*
    Property Height

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double Height() const; //Returns the value of Height
    inline void SetHeight(double value); //Sets the value of the Height property

    /*
    Property ID

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int ID() const; //Returns the value of ID

    /*
    Property IsCrossfree

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsCrossfree() const; //Returns the value of IsCrossfree
    inline void SetIsCrossfree(bool value); //Sets the value of the IsCrossfree property

    /*
    Property IsFixedSize

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsFixedSize() const; //Returns the value of IsFixedSize
    inline void SetIsFixedSize(bool value); //Sets the value of the IsFixedSize property

    /*
    Property IsHatched

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsHatched() const; //Returns the value of IsHatched
    inline void SetIsHatched(bool value); //Sets the value of the IsHatched property

    /*
    Property Italic

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double Italic() const; //Returns the value of Italic
    inline void SetItalic(double value); //Sets the value of the Italic property

    /*
    Property LineSpace

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double LineSpace() const; //Returns the value of LineSpace
    inline void SetLineSpace(double value); //Sets the value of the LineSpace property

    /*
    Property Name

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Ratio

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline double Ratio() const; //Returns the value of Ratio
    inline void SetRatio(double value); //Sets the value of the Ratio property

    /*
    Property Text

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Text() const; //Returns the value of Text
    inline void SetText(const QString& value); //Sets the value of the Text property

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT TextObjects : public QAxObject
{
public:
    TextObjects(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    TextObjects(ITextObjects *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::ITextObject* Item(int ID);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ComponentBase : public QAxObject
{
public:
    ComponentBase(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    ComponentBase(IComponentBase *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassInfo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ClassInfo() const; //Returns the value of ClassInfo

    /*
    Property ClassName

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString ClassName() const; //Returns the value of ClassName

    /*
    Property GenericName

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GenericName() const; //Returns the value of GenericName

    /*
    Property ID

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int ID() const; //Returns the value of ID

    /*
    Method GetAttribute

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetAttribute(const QString& attributeName, bool sync);

    /*
    Method SetAttribute

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetAttribute(const QString& attributeName, const QVariant& val, bool sync);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT ComponentBases : public QAxObject
{
public:
    ComponentBases(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    ComponentBases(IComponentBases *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::IComponentBase* Item(int ID);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT MachineCfgParam : public QAxObject
{
public:
    MachineCfgParam(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    MachineCfgParam(IMachineCfgParam *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Category

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Category() const; //Returns the value of Category

    /*
    Property Name

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Name() const; //Returns the value of Name

    /*
    Property Unit

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString Unit() const; //Returns the value of Unit

    /*
    Property Value

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant Value() const; //Returns the value of Value

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT MachineCfgParams : public QAxObject
{
public:
    MachineCfgParams(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    MachineCfgParams(IMachineCfgParams *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count

    Returns the number of objects in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Item

    Returns an item in the collection.
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::IMachineCfgParam* Item(int ID);

    /*
    Method _NewEnum

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IUnknown* _NewEnum();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT PowerDialog : public QAxObject
{
public:
    PowerDialog(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    PowerDialog(IPowerDlg *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FailedReason

    property FailedReason
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString FailedReason() const; //Returns the value of FailedReason

    /*
    Property LCUOffset

    property LCUOffset
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant LCUOffset() const; //Returns the value of LCUOffset

    /*
    Property Power

    The power - if there was a successful measurement
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant Power() const; //Returns the value of Power

    /*
    Property Result

    Result of validation or regulation
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSACTXLib::pgResultConstants Result() const; //Returns the value of Result

    /*
    Method GetError

    Method GetError
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetError(QString& description);

    /*
    Method HandleEvent

    Send events for automatic mode
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool HandleEvent(int lEvent);

    /*
    Method Show

    Show power dialog - manual mode
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void Show();

    /*
    Method ShowAutomatic

    method ShowAutomatic
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowAutomatic();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT LMOSActX : public QAxWidget
{
public:
    LMOSActX(const QString &licenseKey = QString(), QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        (void) licenseKey;
	    setControl(QStringLiteral("{18213698-a9c9-11d1-a220-0060973058f6}"));
    }

    /*
    Property AllComponents

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* AllComponents() const; //Returns the value of AllComponents

    /*
    Property AllMachineCfgParams

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* AllMachineCfgParams() const; //Returns the value of AllMachineCfgParams

    /*
    Property AutoSignalJobEnd

    For more information, see help context 18 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool AutoSignalJobEnd() const; //Returns the value of AutoSignalJobEnd
    inline void SetAutoSignalJobEnd(bool value); //Sets the value of the AutoSignalJobEnd property

    /*
    Property AutoSignalMarkingEnd

    For more information, see help context 19 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool AutoSignalMarkingEnd() const; //Returns the value of AutoSignalMarkingEnd
    inline void SetAutoSignalMarkingEnd(bool value); //Sets the value of the AutoSignalMarkingEnd property

    /*
    Property Axis

    For more information, see help context 20 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Axis() const; //Returns the value of Axis

    /*
    Property Dummy1

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Dummy1() const; //Returns the value of Dummy1
    inline void SetDummy1(int value); //Sets the value of the Dummy1 property

    /*
    Property Dummy2

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int Dummy2() const; //Returns the value of Dummy2
    inline void SetDummy2(int value); //Sets the value of the Dummy2 property

    /*
    Property FileName

    For more information, see help context 29 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString FileName() const; //Returns the value of FileName
    inline void SetFileName(const QString& value); //Sets the value of the FileName property

    /*
    Property GlobalVariables

    For more information, see help context 85 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* GlobalVariables() const; //Returns the value of GlobalVariables

    /*
    Property HasMatrix

    For more information, see help context 41 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool HasMatrix() const; //Returns the value of HasMatrix
    inline void SetHasMatrix(bool value); //Sets the value of the HasMatrix property

    /*
    Property Layers

    For more information, see help context 46 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Layers() const; //Returns the value of Layers

    /*
    Property LocalVariables

    For more information, see help context 85 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* LocalVariables() const; //Returns the value of LocalVariables

    /*
    Property MachineCfg

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* MachineCfg() const; //Returns the value of MachineCfg

    /*
    Property PowerDlg

    For more information, see help context 57 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* PowerDlg() const; //Returns the value of PowerDlg

    /*
    Property SuppressAutoRedraw

    For more information, see help context 81 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SuppressAutoRedraw() const; //Returns the value of SuppressAutoRedraw
    inline void SetSuppressAutoRedraw(bool value); //Sets the value of the SuppressAutoRedraw property

    /*
    Property VLMBuildLevel

    For more information, see help context 87 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString VLMBuildLevel() const; //Returns the value of VLMBuildLevel

    /*
    Property VLMVersion

    For more information, see help context 88 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString VLMVersion() const; //Returns the value of VLMVersion

    /*
    Property VariableCnt

    For more information, see help context 86 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int VariableCnt() const; //Returns the value of VariableCnt

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void AboutBox();

    /*
    Method ActivateZoomWindow

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ActivateZoomWindow(bool newState);

    /*
    Method AddGlobalQPSet

    For more information, see help context 130 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void AddGlobalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY);

    /*
    Method AddLocalQPSet

    For more information, see help context 132 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void AddLocalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY);

    /*
    Method BeamOn

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void BeamOn(bool bOn);

    /*
    Method CancelJob

    For more information, see help context 21 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool CancelJob();

    /*
    Method ClearAlarms

    For more information, see help context 146 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ClearAlarms();

    /*
    Method ClearLayout

    For more information, see help context 22 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ClearLayout();

    /*
    Method DrawingAngleOffset

    For more information, see help context 23 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingAngleOffset(double dAngle);

    /*
    Method DrawingGetDimension

    For more information, see help context 24 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingGetDimension(double& dWidth, double& dHeight);

    /*
    Method DrawingGetPosValues

    For more information, see help context 25 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingGetPosValues(double& dX, double& dY, double& dAngle);

    /*
    Method DrawingPosOffset

    For more information, see help context 26 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingPosOffset(double dX, double dY);

    /*
    Method DrawingSetDimension

    For more information, see help context 157 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingSetDimension(double dWidth, double dHeight);

    /*
    Method DrawingSetPosValues

    For more information, see help context 27 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool DrawingSetPosValues(double dX, double dY, double dAngle);

    /*
    Method DriftCorr

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void DriftCorr(double lambda1, double lambda2, double deltax, double deltay, int hindex);

    /*
    Method DriftCorrInternal

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void DriftCorrInternal(LMOSACTXLib::eHeads Head, LMOSACTXLib::eDriftModes mode);

    /*
    Method ExportAsLogo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ExportAsLogo(const QString& LogoName, bool ExportEllipsesAsPolylines, int IncrementsPerFullEllipse);

    /*
    Method ExportPl0

    For more information, see help context 138 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ExportPl0(const QString& PL0FileName, bool bShowInitDlg);

    /*
    Method ExportVISFile

    For more information, see help context 28 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ExportVISFile(const QString& VISFileName);

    /*
    Method FileName2

    For more information, see help context 29 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool FileName2(const QString& FName);

    /*
    Method GetAlarms

    For more information, see help context 145 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetAlarms();

    /*
    Method GetAxisUsedInVLM

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis);

    /*
    Method GetBackgroundProperties

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetBackgroundProperties(const QString& MOName, bool& ShowFrame, bool& DrawFrame, bool& BackgroundBitmap, QString& BitmapName, bool& BackgroundColor, int& Color);

    /*
    Method GetDimension

    For more information, see help context 30 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetDimension(const QString& ObjectName, double& dWidth, double& dHeight);

    /*
    Method GetGlobalHatchSetNames

    For more information, see help context 179 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetGlobalHatchSetNames();

    /*
    Method GetGlobalQPSet

    For more information, see help context 39 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetGlobalQPSet(const QString& QPSetName, double& CURRENT, int& SPEED, int& FREQUENCY);

    /*
    Method GetGlobalQPSetNames

    For more information, see help context 135 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetGlobalQPSetNames();

    /*
    Method GetHatchParam

    For more information, see help context 180 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, QVariant& varVal);

    /*
    Method GetHatchProperties

    For more information, see help context 188 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetHatchProperties(const QString& MOName, bool& Unidirectional, bool& Bidirectional, bool& Meandering, bool& OnTheFly, double& LineExcess, bool& NoOutline, bool& Inverse, bool& OutlineCorrection, bool& AutoLineWitdth, bool& OptimizeJumps, double& HatchAngle, double& FromOutline, double& Overlap);

    /*
    Method GetIODefinitions

    For more information, see help context 177 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetIODefinitions(LMOSACTXLib::eIODirection eDir, const QVariant& bitfunction);

    /*
    Method GetLayerProperties

    For more information, see help context 186 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetLayerProperties(const QString& MOName, QString& LayerName);

    /*
    Method GetLocalQPSetNames

    For more information, see help context 136 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetLocalQPSetNames();

    /*
    Method GetLogo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetLogo(const QString& ObjectName);

    /*
    Method GetLogoFilesPath

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetLogoFilesPath();

    /*
    Method GetLogoProperties

    For more information, see help context 187 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetLogoProperties(const QString& LogoName, QString& FileName, bool& OriginalSize, double& xScale, double& yScale, double& Slant, bool& Hatch);

    /*
    Method GetMODescription

    For more information, see help context 36 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetMODescription(const QString& MOName);

    /*
    Method GetMONames

    For more information, see help context 137 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetMONames();

    /*
    Method GetMOQPSet

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMOQPSet(const QString& MOName, QString& QPSetName, LMOSQPSetTypeConstants& QPSetType);

    /*
    Method GetMOType

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline LMOSMOTypeConstants GetMOType(const QString& MOName);

    /*
    Method GetMarkingFilesPath

    For more information, see help context 31 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetMarkingFilesPath();

    /*
    Method GetMatrixCellAmount

    For more information, see help context 32 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetMatrixCellAmount(const QString& MatrixName);

    /*
    Method GetMatrixCellProperties

    For more information, see help context 182 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixCellProperties(const QString& MatrixName, double& Width, double& Height, double& XOffset, double& YOffset, double& XShift, double& YShift, double& Orientation);

    /*
    Method GetMatrixCustomType

    For more information, see help context 34 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetMatrixCustomType(const QString& MatrixName);

    /*
    Method GetMatrixGroupData

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixGroupData(const QString& MatrixName, int Index, double& X, int& xElements, double& Y, int& yElements);

    /*
    Method GetMatrixGroupProperties

    For more information, see help context 184 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixGroupProperties(const QString& MatrixName, double& X, int& xElements, double& Y, int& yElements);

    /*
    Method GetMatrixInterleaveProperties

    For more information, see help context 183 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixInterleaveProperties(const QString& MatrixName, double& X, double& Y);

    /*
    Method GetMatrixMaxBinCount

    For more information, see help context 35 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetMatrixMaxBinCount(const QString& MatrixName);

    /*
    Method GetMatrixOptionProperties

    For more information, see help context 185 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixOptionProperties(const QString& MatrixName, QString& CustomType, bool& ColoredCell, bool& ShowReferenceCell, bool& BinLayoutStatic, bool& BinLayoutDynamic, int& maxBin, bool& Multiplexed);

    /*
    Method GetMatrixRowsAndColsCnt

    For more information, see help context 33 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetMatrixRowsAndColsCnt(const QString& MatrixName, int& RowCnt, int& ColCnt);

    /*
    Method GetMissingResources

    For more information, see help context 158 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetMissingResources(QVariant& list);

    /*
    Method GetNoMarkMOCount

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetNoMarkMOCount();

    /*
    Method GetPosValues

    For more information, see help context 37 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetPosValues(const QString& ObjectName, double& dX, double& dY, double& dAngle);

    /*
    Method GetPosValuesAbs

    For more information, see help context 38 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetPosValuesAbs(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle);

    /*
    Method GetQPSetProperties

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetQPSetProperties(const QString& QPSetName, LMOSACTXLib::LMOSQPSetTypeConstants QPSetType, const QString& MOName, QVariant& PropertyNames, QVariant& PropertyValues);

    /*
    Method GetQualityParam

    For more information, see help context 139 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, QVariant& varVal);

    /*
    Method GetResources

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int GetResources(QVariant& list);

    /*
    Method GetRuntimeHeadOffset

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetRuntimeHeadOffset(double& X, double& Y, int hindex);

    /*
    Method GetShutterState

    For more information, see help context 155 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline ShutterStateConstants GetShutterState();

    /*
    Method GetSignal

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSignal(LMOSACTXLib::eSignalConstants Signal);

    /*
    Method GetSizePosProperties

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSizePosProperties(const QString& MOName, double& PositionX, double& PositionY, double& SizeDX, double& SizeDY, double& Angle, bool& PreserveAspectRatio, bool& FlipHorizontal, bool& FlipVertical, OrientationConstants& RefPoint);

    /*
    Method GetSurfaceRadius

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSurfaceRadius(double& radius);

    /*
    Method GetSurfaceRefPoint

    For more information, see help context 172 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSurfaceRefPoint(double& RefX, double& RefY, double& RefZ);

    /*
    Method GetSurfaceVector

    For more information, see help context 173 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSurfaceVector(double& VecX, double& VecY, double& VecZ);

    /*
    Method GetSystemParameter

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool GetSystemParameter(LMOSACTXLib::eSystemParameterGet partype, QVariant& varVal);

    /*
    Method GetText

    For more information, see help context 40 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString GetText(const QString& ObjectName);

    /*
    Method ImportDXFFile

    For more information, see help context 149 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportDXFFile(const QString& DXFFileName);

    /*
    Method ImportDXFFile2

    For more information, see help context 150 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ImportDXFFile2(const QString& DXFFileName);

    /*
    Method ImportLogoFile

    For more information, see help context 190 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportLogoFile(const QString& XMLFileName);

    /*
    Method ImportLogoFile2

    For more information, see help context 191 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportLogoFile2(const QString& XMLFileName);

    /*
    Method ImportPSFile

    For more information, see help context 170 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportPSFile(const QString& PSFileName);

    /*
    Method ImportPSFile2

    For more information, see help context 171 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ImportPSFile2(const QString& PSFileName);

    /*
    Method ImportXMLFile

    For more information, see help context 42 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ImportXMLFile(const QString& XMLFileName);

    /*
    Method ImportXMLFile2

    For more information, see help context 151 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ImportXMLFile2(const QString& XMLFileName);

    /*
    Method InitMachine

    For more information, see help context 44 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool InitMachine();

    /*
    Method InitMachineEx

    For more information, see help context 44 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool InitMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask);

    /*
    Method IsFeatureLicensed

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool IsFeatureLicensed(const QString& feature);

    /*
    Method IsMOName

    For more information, see help context 43 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int IsMOName(const QString& MOName);

    /*
    Method JobLoaded

    For more information, see help context 45 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool JobLoaded();

    /*
    Method Layer

    For more information, see help context 46 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Layer(const QString& Name);

    /*
    Method LoadInclinedPlaneFCR

    For more information, see help context 127 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool LoadInclinedPlaneFCR(double dAlpha, double dBeta, double dBeamOrigin, double dPlaneIntersectionOffset, int lPlaneIntersectionOrientation, int lHeadIndex);

    /*
    Method LoadJob

    For more information, see help context 47 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool LoadJob();

    /*
    Method LoadXML

    For more information, see help context 152 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool LoadXML(const QString& XMLString);

    /*
    Method LoadXML2

    For more information, see help context 153 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void LoadXML2(const QString& XMLString);

    /*
    Method MatrixAssignBinLayout

    For more information, see help context 48 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixAssignBinLayout(const QString& MatrixName, int BinNum, const QString& LayoutName);

    /*
    Method MatrixAssignBinText

    For more information, see help context 49 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixAssignBinText(const QString& MatrixName, int BinNum, const QString& ObjectName, const QString& BinText);

    /*
    Method MatrixQueryBin

    For more information, see help context 50 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline int MatrixQueryBin(const QString& MatrixName, int CellIndex);

    /*
    Method MatrixQueryBinText

    For more information, see help context 51 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QString MatrixQueryBinText(const QString& MatrixName, int BinNum, const QString& ObjectName);

    /*
    Method MatrixQueryCellsPerPart

    For more information, see help context 52 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixQueryCellsPerPart(const QString& MatrixName, int PartIndex, int& CellStartIndex, int& CellCnt);

    /*
    Method MatrixQueryPartCnt

    For more information, see help context 53 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixQueryPartCnt(const QString& MatrixName, int& PartCnt);

    /*
    Method MatrixSelectBin

    For more information, see help context 54 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixSelectBin(const QString& MatrixName, int CellIndex, int BinNum);

    /*
    Method MatrixSelectBinAll

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MatrixSelectBinAll(const QString& MatrixName, QVariant& BinValues);

    /*
    Method MoveA

    For more information, see help context 55 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool MoveA(const QString& ObjectName, double dX, double dY);

    /*
    Method PLCCommand

    For more information, see help context 56 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool PLCCommand(const QString& ID1, const QString& ID2, const QString& Command);

    /*
    Method PLCCommandEx

    For more information, see help context 124 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool PLCCommandEx(const QString& ID1, const QString& ID2, const QVariant& Command);

    /*
    Method ReadByte

    For more information, see help context 58 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReadByte(const int& Port, const int& bMask, int& InByte);

    /*
    Method ReadIOBit

    For more information, see help context 165 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReadIOBit(const QVariant& bitfunction, QVariant& Result);

    /*
    Method RedrawLayout

    For more information, see help context 59 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RedrawLayout();

    /*
    Method RemoveGlobalQPSet

    For more information, see help context 131 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RemoveGlobalQPSet(const QString& Name);

    /*
    Method RemoveLocalQPSet

    For more information, see help context 133 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RemoveLocalQPSet(const QString& Name);

    /*
    Method ReplaceDrawing

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReplaceDrawing(const QString& FileName);

    /*
    Method ReplaceGlobalQPSet

    For more information, see help context 60 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReplaceGlobalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName);

    /*
    Method ReplaceLocalQPSet

    For more information, see help context 61 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ReplaceLocalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName);

    /*
    Method RotateA

    For more information, see help context 62 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool RotateA(const QString& ObjectName, double dAngle);

    /*
    Method RotateView

    Rotate preview window by Angle
For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void RotateView(double Angle);

    /*
    Method Save

    For more information, see help context 63 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool Save(const QString& FileName);

    /*
    Method SaveAsVersion

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SaveAsVersion(const QString& FileName, LMOSACTXLib::LMOSSaveAsVersionConstants SaveVersion);

    /*
    Method SaveGlobalHatchSets

    For more information, see help context 178 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SaveGlobalHatchSets();

    /*
    Method SaveGlobalQPSets

    For more information, see help context 134 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SaveGlobalQPSets();

    /*
    Method SaveImage

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SaveImage(int resx, int resy, const QString& FileName);

    /*
    Method SaveImageWithRuler

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SaveImageWithRuler(int resx, int resy, const QString& FileName);

    /*
    Method SelectShadow

    For more information, see help context 176 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SelectShadow(int ShadowIndex);

    /*
    Method SelectSingleStep

    For more information, see help context 65 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SelectSingleStep(int StepIndex);

    /*
    Method SetAxisUsedInVLM

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis, bool Value);

    /*
    Method SetDimension

    For more information, see help context 122 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetDimension(const QString& ObjectName, double dWidth, double dHeight);

    /*
    Method SetGlobalQPSet

    For more information, see help context 64 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetGlobalQPSet(const QString& QPSetName, double CURRENT, int SPEED, int FREQUENCY, bool bSave);

    /*
    Method SetHatchParam

    For more information, see help context 181 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, const QVariant& varVal);

    /*
    Method SetHatchProperties

    For more information, see help context 189 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetHatchProperties(const QString& MOName, bool Unidirectional, bool Bidirectional, bool Meandering, bool OnTheFly, double LineExcess, bool NoOutline, bool Inverse, bool OutlineCorrection, bool AutoLineWidth, bool OptimizeJumps, double HatchAngle, double FromOutline, double Overlap);

    /*
    Method SetLaserable

    For more information, see help context 66 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetLaserable(const QString& MOName, bool bFlag);

    /*
    Method SetLogo

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetLogo(const QString& ObjectName, const QString& VariableValue);

    /*
    Method SetMODescription

    For more information, see help context 72 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMODescription(const QString& MOName, const QString& description);

    /*
    Method SetMOLayer

    For more information, see help context 169 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMOLayer(const QString& MOName, const QString& LayerName);

    /*
    Method SetMatrixCellAngle

    For more information, see help context 67 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellAngle(const QString& MatrixName, double dAngle);

    /*
    Method SetMatrixCellOccupation

    For more information, see help context 68 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellOccupation(const QString& MatrixName, int iCellIndex, bool IsOccupied);

    /*
    Method SetMatrixCellOccupationAll

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellOccupationAll(const QString& MatrixName, QVariant& OccValues);

    /*
    Method SetMatrixCellOffset

    For more information, see help context 69 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixCellOffset(const QString& MatrixName, int iCellIndex, double OffX, double OffY, double OffPhi);

    /*
    Method SetMatrixMaxBinCount

    For more information, see help context 70 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixMaxBinCount(const QString& MatrixName, int MaxBinCount);

    /*
    Method SetMatrixRefCell

    For more information, see help context 71 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetMatrixRefCell(const QString& MatrixName, int iIndex, bool bDrawRefCellOnly);

    /*
    Method SetPosValues

    For more information, see help context 73 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetPosValues(const QString& ObjectName, double dX, double dY, double dAngle);

    /*
    Method SetQualityParam

    For more information, see help context 140 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, const QVariant& varVal, bool bSave);

    /*
    Method SetRuntimeHeadOffset

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetRuntimeHeadOffset(double X, double Y, int hindex);

    /*
    Method SetSignal

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetSignal(LMOSACTXLib::eSignalConstants Signal, bool Value);

    /*
    Method SetSurfaceRadius

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSurfaceRadius(double radius);

    /*
    Method SetSurfaceRefPoint

    For more information, see help context 174 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSurfaceRefPoint(double RefX, double RefY, double RefZ);

    /*
    Method SetSurfaceVector

    For more information, see help context 175 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSurfaceVector(double VecX, double VecY, double VecZ);

    /*
    Method SetSystemParameter

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetSystemParameter(LMOSACTXLib::eSystemParameterSet partype, const QVariant& varVal);

    /*
    Method SetText

    For more information, see help context 74 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SetText(const QString& ObjectName, const QString& VariableValue);

    /*
    Method ShowMarkingArea

    For more information, see help context 75 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMarkingArea();

    /*
    Method ShowMarkingAreaZoom

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMarkingAreaZoom();

    /*
    Method ShowMatrixCell

    For more information, see help context 76 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMatrixCell();

    /*
    Method ShowMatrixCell2

    For more information, see help context 77 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMatrixCell2(const QString& MatrixName);

    /*
    Method ShowMatrixCellZoom

    For more information, see help context 141 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowMatrixCellZoom();

    /*
    Method ShowWholeDrawing

    For more information, see help context 78 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void ShowWholeDrawing();

    /*
    Method ShowZoomWindow

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool ShowZoomWindow(int topLeftX, int topLeftY, int bottomRightX, int bottomRightY);

    /*
    Method SplitDrawing

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool SplitDrawing(double offset, double Overlap);

    /*
    Method StartMarking

    For more information, see help context 79 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool StartMarking();

    /*
    Method StartPosHelp

    For more information, see help context 125 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StartPosHelp(const QString& ObjectName);

    /*
    Method StartPosHelpLast

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StartPosHelpLast(const QString& ObjectName);

    /*
    Method StdCorr

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StdCorr(int hindex);

    /*
    Method StopMarking

    For more information, see help context 80 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool StopMarking();

    /*
    Method StopPosHelp

    For more information, see help context 126 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void StopPosHelp();

    /*
    Method SynchronizeMarking

    For more information, see help context 82 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SynchronizeMarking();

    /*
    Method TTLFieldCorr

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLFieldCorr(const QString& FileName, int Action, int Head);

    /*
    Method TTLGetAbsPosValues

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLGetAbsPosValues(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle);

    /*
    Method TTLPxCamera

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLPxCamera(double dX, double dY);

    /*
    Method TTLPxLaser

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TTLPxLaser(double dX, double dY);

    /*
    Method TermMachine

    For more information, see help context 83 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TermMachine();

    /*
    Method TermMachineEx

    For more information, see help context 83 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool TermMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask);

    /*
    Method TextObjects

    For more information, see help context 84 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* TextObjects(const QString& MOName);

    /*
    Method Variable

    For more information, see help context 85 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline IDispatch* Variable(int Index);

    /*
    Method WaitOnByte

    For more information, see help context 89 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WaitOnByte(LMOSACTXLib::InPortConstants Port, int bMask, int bData, int lTimeOut);

    /*
    Method WaitOnIOBit

    For more information, see help context 166 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WaitOnIOBit(const QVariant& bitfunction, const QVariant& values, int timeout);

    /*
    Method WriteByte

    For more information, see help context 90 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WriteByte(LMOSACTXLib::OutPortConstants Port, int bMask, int bData);

    /*
    Method WriteIOBit

    For more information, see help context 167 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline bool WriteIOBit(const QVariant& bitfunction, const QVariant& values);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class LMOSACTXLIB_EXPORT MachineCfg : public QAxObject
{
public:
    MachineCfg(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    MachineCfg(IMachineCfg *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method GetValue

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline QVariant GetValue(int categoryId, int valueId);

    /*
    Method SetValue

    For more information, see help context 0 in C:\Rofin\VISUAL~1\Bin\LMOSActX.hlp.
    */
    inline void SetValue(int categoryId, int valueId, const QVariant& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_LMOSACTXLIB_NOINLINES
inline QString IPowerDlg::FailedReason() const
{
    QVariant qax_result = property("FailedReason");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QVariant IPowerDlg::LCUOffset() const
{
    QVariant qax_result = property("LCUOffset");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QVariant IPowerDlg::Power() const
{
    QVariant qax_result = property("Power");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline LMOSACTXLib::pgResultConstants IPowerDlg::Result() const
{
    QVariant qax_result = property("Result");
    Q_ASSERT(qax_result.isValid());
    return *(LMOSACTXLib::pgResultConstants*)qax_result.constData();
}

inline int IPowerDlg::GetError(QString& description)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&description};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline bool IPowerDlg::HandleEvent(int lEvent)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lEvent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void IPowerDlg::Show()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IPowerDlg::ShowAutomatic()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline int ILayers::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::ILayer* ILayers::Item(const QString& Name)
{
    LMOSACTXLib::ILayer* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::ILayer*>("ILayer*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::ILayer>("ILayer", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* ILayers::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline bool ILayer::Exportable() const
{
    QVariant qax_result = property("Exportable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ILayer::SetExportable(bool value){ setProperty("Exportable", QVariant(value)); }

inline double ILayer::FocusCorrection() const
{
    QVariant qax_result = property("FocusCorrection");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ILayer::SetFocusCorrection(double value){ setProperty("FocusCorrection", QVariant(value)); }

inline double ILayer::HeightZAxis() const
{
    QVariant qax_result = property("HeightZAxis");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ILayer::SetHeightZAxis(double value){ setProperty("HeightZAxis", QVariant(value)); }

inline bool ILayer::Laserable() const
{
    QVariant qax_result = property("Laserable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ILayer::SetLaserable(bool value){ setProperty("Laserable", QVariant(value)); }

inline QString ILayer::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ILayer::Selectable() const
{
    QVariant qax_result = property("Selectable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ILayer::SetSelectable(bool value){ setProperty("Selectable", QVariant(value)); }

inline bool ILayer::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ILayer::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline QString ILayer::_Name() const
{
    QVariant qax_result = property("_Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline IDispatch* _DLMOSActX::AllComponents() const
{
    QVariant qax_result = property("AllComponents");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* _DLMOSActX::AllMachineCfgParams() const
{
    QVariant qax_result = property("AllMachineCfgParams");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool _DLMOSActX::AutoSignalJobEnd() const
{
    QVariant qax_result = property("AutoSignalJobEnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DLMOSActX::SetAutoSignalJobEnd(bool value){ setProperty("AutoSignalJobEnd", QVariant(value)); }

inline bool _DLMOSActX::AutoSignalMarkingEnd() const
{
    QVariant qax_result = property("AutoSignalMarkingEnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DLMOSActX::SetAutoSignalMarkingEnd(bool value){ setProperty("AutoSignalMarkingEnd", QVariant(value)); }

inline IDispatch* _DLMOSActX::Axis() const
{
    QVariant qax_result = property("Axis");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int _DLMOSActX::Dummy1() const
{
    QVariant qax_result = property("Dummy1");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DLMOSActX::SetDummy1(int value){ setProperty("Dummy1", QVariant(value)); }

inline int _DLMOSActX::Dummy2() const
{
    QVariant qax_result = property("Dummy2");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DLMOSActX::SetDummy2(int value){ setProperty("Dummy2", QVariant(value)); }

inline QString _DLMOSActX::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DLMOSActX::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline IDispatch* _DLMOSActX::GlobalVariables() const
{
    QVariant qax_result = property("GlobalVariables");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool _DLMOSActX::HasMatrix() const
{
    QVariant qax_result = property("HasMatrix");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DLMOSActX::SetHasMatrix(bool value){ setProperty("HasMatrix", QVariant(value)); }

inline IDispatch* _DLMOSActX::Layers() const
{
    QVariant qax_result = property("Layers");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* _DLMOSActX::LocalVariables() const
{
    QVariant qax_result = property("LocalVariables");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* _DLMOSActX::MachineCfg() const
{
    QVariant qax_result = property("MachineCfg");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* _DLMOSActX::PowerDlg() const
{
    QVariant qax_result = property("PowerDlg");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool _DLMOSActX::SuppressAutoRedraw() const
{
    QVariant qax_result = property("SuppressAutoRedraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DLMOSActX::SetSuppressAutoRedraw(bool value){ setProperty("SuppressAutoRedraw", QVariant(value)); }

inline QString _DLMOSActX::VLMBuildLevel() const
{
    QVariant qax_result = property("VLMBuildLevel");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString _DLMOSActX::VLMVersion() const
{
    QVariant qax_result = property("VLMVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int _DLMOSActX::VariableCnt() const
{
    QVariant qax_result = property("VariableCnt");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void _DLMOSActX::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void _DLMOSActX::ActivateZoomWindow(bool newState)
{
    void *_a[] = {0, (void*)&newState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void _DLMOSActX::AddGlobalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY)
{
    void *_a[] = {0, (void*)&Name, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void _DLMOSActX::AddLocalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY)
{
    void *_a[] = {0, (void*)&Name, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void _DLMOSActX::BeamOn(bool bOn)
{
    void *_a[] = {0, (void*)&bOn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool _DLMOSActX::CancelJob()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool _DLMOSActX::ClearAlarms()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool _DLMOSActX::ClearLayout()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool _DLMOSActX::DrawingAngleOffset(double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool _DLMOSActX::DrawingGetDimension(double& dWidth, double& dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool _DLMOSActX::DrawingGetPosValues(double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool _DLMOSActX::DrawingPosOffset(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool _DLMOSActX::DrawingSetDimension(double dWidth, double dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool _DLMOSActX::DrawingSetPosValues(double dX, double dY, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void _DLMOSActX::DriftCorr(double lambda1, double lambda2, double deltax, double deltay, int hindex)
{
    void *_a[] = {0, (void*)&lambda1, (void*)&lambda2, (void*)&deltax, (void*)&deltay, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void _DLMOSActX::DriftCorrInternal(LMOSACTXLib::eHeads Head, LMOSACTXLib::eDriftModes mode)
{
    void *_a[] = {0, (void*)&Head, (void*)&mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline bool _DLMOSActX::ExportAsLogo(const QString& LogoName, bool ExportEllipsesAsPolylines, int IncrementsPerFullEllipse)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LogoName, (void*)&ExportEllipsesAsPolylines, (void*)&IncrementsPerFullEllipse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool _DLMOSActX::ExportPl0(const QString& PL0FileName, bool bShowInitDlg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PL0FileName, (void*)&bShowInitDlg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool _DLMOSActX::ExportVISFile(const QString& VISFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&VISFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool _DLMOSActX::FileName2(const QString& FName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline QVariant _DLMOSActX::GetAlarms()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetBackgroundProperties(const QString& MOName, bool& ShowFrame, bool& DrawFrame, bool& BackgroundBitmap, QString& BitmapName, bool& BackgroundColor, int& Color)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&ShowFrame, (void*)&DrawFrame, (void*)&BackgroundBitmap, (void*)&BitmapName, (void*)&BackgroundColor, (void*)&Color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetDimension(const QString& ObjectName, double& dWidth, double& dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline QVariant _DLMOSActX::GetGlobalHatchSetNames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetGlobalQPSet(const QString& QPSetName, double& CURRENT, int& SPEED, int& FREQUENCY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&QPSetName, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline QVariant _DLMOSActX::GetGlobalQPSetNames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hpname, (void*)&hstype, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetHatchProperties(const QString& MOName, bool& Unidirectional, bool& Bidirectional, bool& Meandering, bool& OnTheFly, double& LineExcess, bool& NoOutline, bool& Inverse, bool& OutlineCorrection, bool& AutoLineWitdth, bool& OptimizeJumps, double& HatchAngle, double& FromOutline, double& Overlap)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&Unidirectional, (void*)&Bidirectional, (void*)&Meandering, (void*)&OnTheFly, (void*)&LineExcess, (void*)&NoOutline, (void*)&Inverse, (void*)&OutlineCorrection, (void*)&AutoLineWitdth, (void*)&OptimizeJumps, (void*)&HatchAngle, (void*)&FromOutline, (void*)&Overlap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetIODefinitions(LMOSACTXLib::eIODirection eDir, const QVariant& bitfunction)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eDir, (void*)&bitfunction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetLayerProperties(const QString& MOName, QString& LayerName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&LayerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline QVariant _DLMOSActX::GetLocalQPSetNames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline QString _DLMOSActX::GetLogo(const QString& ObjectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline QString _DLMOSActX::GetLogoFilesPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetLogoProperties(const QString& LogoName, QString& FileName, bool& OriginalSize, double& xScale, double& yScale, double& Slant, bool& Hatch)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LogoName, (void*)&FileName, (void*)&OriginalSize, (void*)&xScale, (void*)&yScale, (void*)&Slant, (void*)&Hatch};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline QString _DLMOSActX::GetMODescription(const QString& MOName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline QVariant _DLMOSActX::GetMONames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMOQPSet(const QString& MOName, QString& QPSetName, LMOSQPSetTypeConstants& QPSetType)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&QPSetName, (void*)&QPSetType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline LMOSMOTypeConstants _DLMOSActX::GetMOType(const QString& MOName)
{
    LMOSMOTypeConstants qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline QString _DLMOSActX::GetMarkingFilesPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline int _DLMOSActX::GetMatrixCellAmount(const QString& MatrixName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMatrixCellProperties(const QString& MatrixName, double& Width, double& Height, double& XOffset, double& YOffset, double& XShift, double& YShift, double& Orientation)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&Width, (void*)&Height, (void*)&XOffset, (void*)&YOffset, (void*)&XShift, (void*)&YShift, (void*)&Orientation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline QString _DLMOSActX::GetMatrixCustomType(const QString& MatrixName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMatrixGroupData(const QString& MatrixName, int Index, double& X, int& xElements, double& Y, int& yElements)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&Index, (void*)&X, (void*)&xElements, (void*)&Y, (void*)&yElements};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMatrixGroupProperties(const QString& MatrixName, double& X, int& xElements, double& Y, int& yElements)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&X, (void*)&xElements, (void*)&Y, (void*)&yElements};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMatrixInterleaveProperties(const QString& MatrixName, double& X, double& Y)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline int _DLMOSActX::GetMatrixMaxBinCount(const QString& MatrixName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMatrixOptionProperties(const QString& MatrixName, QString& CustomType, bool& ColoredCell, bool& ShowReferenceCell, bool& BinLayoutStatic, bool& BinLayoutDynamic, int& maxBin, bool& Multiplexed)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&CustomType, (void*)&ColoredCell, (void*)&ShowReferenceCell, (void*)&BinLayoutStatic, (void*)&BinLayoutDynamic, (void*)&maxBin, (void*)&Multiplexed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetMatrixRowsAndColsCnt(const QString& MatrixName, int& RowCnt, int& ColCnt)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&RowCnt, (void*)&ColCnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline int _DLMOSActX::GetMissingResources(QVariant& list)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&list};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline int _DLMOSActX::GetNoMarkMOCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetPosValues(const QString& ObjectName, double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetPosValuesAbs(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&lMatrixCellIndex, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetQPSetProperties(const QString& QPSetName, LMOSACTXLib::LMOSQPSetTypeConstants QPSetType, const QString& MOName, QVariant& PropertyNames, QVariant& PropertyValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&QPSetName, (void*)&QPSetType, (void*)&MOName, (void*)&PropertyNames, (void*)&PropertyValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&qpname, (void*)&qptype, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline int _DLMOSActX::GetResources(QVariant& list)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&list};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetRuntimeHeadOffset(double& X, double& Y, int hindex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline ShutterStateConstants _DLMOSActX::GetShutterState()
{
    ShutterStateConstants qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetSignal(LMOSACTXLib::eSignalConstants Signal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Signal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetSizePosProperties(const QString& MOName, double& PositionX, double& PositionY, double& SizeDX, double& SizeDY, double& Angle, bool& PreserveAspectRatio, bool& FlipHorizontal, bool& FlipVertical, OrientationConstants& RefPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&PositionX, (void*)&PositionY, (void*)&SizeDX, (void*)&SizeDY, (void*)&Angle, (void*)&PreserveAspectRatio, (void*)&FlipHorizontal, (void*)&FlipVertical, (void*)&RefPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetSurfaceRadius(double& radius)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&radius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetSurfaceRefPoint(double& RefX, double& RefY, double& RefZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&RefX, (void*)&RefY, (void*)&RefZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetSurfaceVector(double& VecX, double& VecY, double& VecZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&VecX, (void*)&VecY, (void*)&VecZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool _DLMOSActX::GetSystemParameter(LMOSACTXLib::eSystemParameterGet partype, QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline QString _DLMOSActX::GetText(const QString& ObjectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool _DLMOSActX::ImportDXFFile(const QString& DXFFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DXFFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline void _DLMOSActX::ImportDXFFile2(const QString& DXFFileName)
{
    void *_a[] = {0, (void*)&DXFFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline bool _DLMOSActX::ImportLogoFile(const QString& XMLFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool _DLMOSActX::ImportLogoFile2(const QString& XMLFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool _DLMOSActX::ImportPSFile(const QString& PSFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PSFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline void _DLMOSActX::ImportPSFile2(const QString& PSFileName)
{
    void *_a[] = {0, (void*)&PSFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline bool _DLMOSActX::ImportXMLFile(const QString& XMLFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void _DLMOSActX::ImportXMLFile2(const QString& XMLFileName)
{
    void *_a[] = {0, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline bool _DLMOSActX::InitMachine()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline bool _DLMOSActX::InitMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ModulesMask};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline bool _DLMOSActX::IsFeatureLicensed(const QString& feature)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&feature};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline int _DLMOSActX::IsMOName(const QString& MOName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool _DLMOSActX::JobLoaded()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline IDispatch* _DLMOSActX::Layer(const QString& Name)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool _DLMOSActX::LoadInclinedPlaneFCR(double dAlpha, double dBeta, double dBeamOrigin, double dPlaneIntersectionOffset, int lPlaneIntersectionOrientation, int lHeadIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAlpha, (void*)&dBeta, (void*)&dBeamOrigin, (void*)&dPlaneIntersectionOffset, (void*)&lPlaneIntersectionOrientation, (void*)&lHeadIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline bool _DLMOSActX::LoadJob()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline bool _DLMOSActX::LoadXML(const QString& XMLString)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline void _DLMOSActX::LoadXML2(const QString& XMLString)
{
    void *_a[] = {0, (void*)&XMLString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline bool _DLMOSActX::MatrixAssignBinLayout(const QString& MatrixName, int BinNum, const QString& LayoutName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinNum, (void*)&LayoutName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline bool _DLMOSActX::MatrixAssignBinText(const QString& MatrixName, int BinNum, const QString& ObjectName, const QString& BinText)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinNum, (void*)&ObjectName, (void*)&BinText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline int _DLMOSActX::MatrixQueryBin(const QString& MatrixName, int CellIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&CellIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline QString _DLMOSActX::MatrixQueryBinText(const QString& MatrixName, int BinNum, const QString& ObjectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinNum, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool _DLMOSActX::MatrixQueryCellsPerPart(const QString& MatrixName, int PartIndex, int& CellStartIndex, int& CellCnt)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&PartIndex, (void*)&CellStartIndex, (void*)&CellCnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool _DLMOSActX::MatrixQueryPartCnt(const QString& MatrixName, int& PartCnt)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&PartCnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline bool _DLMOSActX::MatrixSelectBin(const QString& MatrixName, int CellIndex, int BinNum)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&CellIndex, (void*)&BinNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline bool _DLMOSActX::MatrixSelectBinAll(const QString& MatrixName, QVariant& BinValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline bool _DLMOSActX::MoveA(const QString& ObjectName, double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline bool _DLMOSActX::PLCCommand(const QString& ID1, const QString& ID2, const QString& Command)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ID1, (void*)&ID2, (void*)&Command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline bool _DLMOSActX::PLCCommandEx(const QString& ID1, const QString& ID2, const QVariant& Command)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ID1, (void*)&ID2, (void*)&Command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline bool _DLMOSActX::ReadByte(LMOSACTXLib::InPortConstants Port, int bMask, int& InByte)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&bMask, (void*)&InByte};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline bool _DLMOSActX::ReadIOBit(const QVariant& bitfunction, QVariant& Result)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitfunction, (void*)&Result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline void _DLMOSActX::RedrawLayout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void _DLMOSActX::RemoveGlobalQPSet(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void _DLMOSActX::RemoveLocalQPSet(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline bool _DLMOSActX::ReplaceDrawing(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline bool _DLMOSActX::ReplaceGlobalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OriginalQPSetName, (void*)&NewQPSetName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}

inline bool _DLMOSActX::ReplaceLocalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OriginalQPSetName, (void*)&NewQPSetName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
    return qax_result;
}

inline bool _DLMOSActX::RotateA(const QString& ObjectName, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
    return qax_result;
}

inline void _DLMOSActX::RotateView(double Angle)
{
    void *_a[] = {0, (void*)&Angle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
}

inline bool _DLMOSActX::Save(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline bool _DLMOSActX::SaveAsVersion(const QString& FileName, LMOSACTXLib::LMOSSaveAsVersionConstants SaveVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&SaveVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline void _DLMOSActX::SaveGlobalHatchSets()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
}

inline void _DLMOSActX::SaveGlobalQPSets()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
}

inline bool _DLMOSActX::SaveImage(int resx, int resy, const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&resx, (void*)&resy, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline bool _DLMOSActX::SaveImageWithRuler(int resx, int resy, const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&resx, (void*)&resy, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline bool _DLMOSActX::SelectShadow(int ShadowIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ShadowIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline bool _DLMOSActX::SelectSingleStep(int StepIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StepIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline void _DLMOSActX::SetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis, bool Value)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
}

inline bool _DLMOSActX::SetDimension(const QString& ObjectName, double dWidth, double dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetGlobalQPSet(const QString& QPSetName, double CURRENT, int SPEED, int FREQUENCY, bool bSave)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&QPSetName, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY, (void*)&bSave};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, const QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hpname, (void*)&hstype, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetHatchProperties(const QString& MOName, bool Unidirectional, bool Bidirectional, bool Meandering, bool OnTheFly, double LineExcess, bool NoOutline, bool Inverse, bool OutlineCorrection, bool AutoLineWidth, bool OptimizeJumps, double HatchAngle, double FromOutline, double Overlap)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&Unidirectional, (void*)&Bidirectional, (void*)&Meandering, (void*)&OnTheFly, (void*)&LineExcess, (void*)&NoOutline, (void*)&Inverse, (void*)&OutlineCorrection, (void*)&AutoLineWidth, (void*)&OptimizeJumps, (void*)&HatchAngle, (void*)&FromOutline, (void*)&Overlap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetLaserable(const QString& MOName, bool bFlag)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&bFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetLogo(const QString& ObjectName, const QString& VariableValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&VariableValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMODescription(const QString& MOName, const QString& description)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&description};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMOLayer(const QString& MOName, const QString& LayerName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&LayerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMatrixCellAngle(const QString& MatrixName, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMatrixCellOccupation(const QString& MatrixName, int iCellIndex, bool IsOccupied)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&iCellIndex, (void*)&IsOccupied};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMatrixCellOccupationAll(const QString& MatrixName, QVariant& OccValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&OccValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMatrixCellOffset(const QString& MatrixName, int iCellIndex, double OffX, double OffY, double OffPhi)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&iCellIndex, (void*)&OffX, (void*)&OffY, (void*)&OffPhi};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMatrixMaxBinCount(const QString& MatrixName, int MaxBinCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&MaxBinCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetMatrixRefCell(const QString& MatrixName, int iIndex, bool bDrawRefCellOnly)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&iIndex, (void*)&bDrawRefCellOnly};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetPosValues(const QString& ObjectName, double dX, double dY, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, const QVariant& varVal, bool bSave)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&qpname, (void*)&qptype, (void*)&partype, (void*)&varVal, (void*)&bSave};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetRuntimeHeadOffset(double X, double Y, int hindex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
    return qax_result;
}

inline void _DLMOSActX::SetSignal(LMOSACTXLib::eSignalConstants Signal, bool Value)
{
    void *_a[] = {0, (void*)&Signal, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
}

inline bool _DLMOSActX::SetSurfaceRadius(double radius)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&radius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetSurfaceRefPoint(double RefX, double RefY, double RefZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&RefX, (void*)&RefY, (void*)&RefZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetSurfaceVector(double VecX, double VecY, double VecZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&VecX, (void*)&VecY, (void*)&VecZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetSystemParameter(LMOSACTXLib::eSystemParameterSet partype, const QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
    return qax_result;
}

inline bool _DLMOSActX::SetText(const QString& ObjectName, const QString& VariableValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&VariableValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
    return qax_result;
}

inline void _DLMOSActX::ShowMarkingArea()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
}

inline void _DLMOSActX::ShowMarkingAreaZoom()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline void _DLMOSActX::ShowMatrixCell()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
}

inline void _DLMOSActX::ShowMatrixCell2(const QString& MatrixName)
{
    void *_a[] = {0, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
}

inline void _DLMOSActX::ShowMatrixCellZoom()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline void _DLMOSActX::ShowWholeDrawing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
}

inline bool _DLMOSActX::ShowZoomWindow(int topLeftX, int topLeftY, int bottomRightX, int bottomRightY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&topLeftX, (void*)&topLeftY, (void*)&bottomRightX, (void*)&bottomRightY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
    return qax_result;
}

inline bool _DLMOSActX::SplitDrawing(double offset, double Overlap)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&offset, (void*)&Overlap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline bool _DLMOSActX::StartMarking()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline void _DLMOSActX::StartPosHelp(const QString& ObjectName)
{
    void *_a[] = {0, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
}

inline void _DLMOSActX::StartPosHelpLast(const QString& ObjectName)
{
    void *_a[] = {0, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
}

inline void _DLMOSActX::StdCorr(int hindex)
{
    void *_a[] = {0, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
}

inline bool _DLMOSActX::StopMarking()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
    return qax_result;
}

inline void _DLMOSActX::StopPosHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline void _DLMOSActX::SynchronizeMarking()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
}

inline bool _DLMOSActX::TTLFieldCorr(const QString& FileName, int Action, int Head)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Action, (void*)&Head};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
    return qax_result;
}

inline bool _DLMOSActX::TTLGetAbsPosValues(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&lMatrixCellIndex, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
    return qax_result;
}

inline bool _DLMOSActX::TTLPxCamera(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
    return qax_result;
}

inline bool _DLMOSActX::TTLPxLaser(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
    return qax_result;
}

inline bool _DLMOSActX::TermMachine()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
    return qax_result;
}

inline bool _DLMOSActX::TermMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ModulesMask};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
    return qax_result;
}

inline IDispatch* _DLMOSActX::TextObjects(const QString& MOName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
    return qax_result;
}

inline IDispatch* _DLMOSActX::Variable(int Index)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
    return qax_result;
}

inline bool _DLMOSActX::WaitOnByte(LMOSACTXLib::InPortConstants Port, int bMask, int bData, int lTimeOut)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&bMask, (void*)&bData, (void*)&lTimeOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
    return qax_result;
}

inline bool _DLMOSActX::WaitOnIOBit(const QVariant& bitfunction, const QVariant& values, int timeout)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitfunction, (void*)&values, (void*)&timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
    return qax_result;
}

inline bool _DLMOSActX::WriteByte(LMOSACTXLib::OutPortConstants Port, int bMask, int bData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&bMask, (void*)&bData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
    return qax_result;
}

inline bool _DLMOSActX::WriteIOBit(const QVariant& bitfunction, const QVariant& values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitfunction, (void*)&values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
    return qax_result;
}


inline int IResDesc::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IResDesc::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IResDesc::ResName() const
{
    QVariant qax_result = property("ResName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline LMOSACTXLib::eResourceTypes IResDesc::ResType() const
{
    QVariant qax_result = property("ResType");
    Q_ASSERT(qax_result.isValid());
    return *(LMOSACTXLib::eResourceTypes*)qax_result.constData();
}


inline bool IAxis::AxisAvailable(LMOSACTXLib::eAxisType eAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant IAxis::GetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis, (void*)&eAxisParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline double IAxis::GetPos(LMOSACTXLib::eAxisType eAxis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double IAxis::GetPos(LMOSACTXLib::eAxisType eAxis, bool bDoRequest)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis, (void*)&bDoRequest};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline double IAxis::GetPosW()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline double IAxis::GetPosX()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline double IAxis::GetPosY()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline double IAxis::GetPosZ()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool IAxis::Inverted(LMOSACTXLib::eAxisType eAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void IAxis::Jog(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eJogType eJog)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&eJog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IAxis::MoveAxes()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IAxis::MoveAxisAsync(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&dPos, (void*)&bIsAbsoultePos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IAxis::MoveEnd(int lResult)
{
    void *_a[] = {0, (void*)&lResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IAxis::MoveHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IAxis::NewPos(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&dPos, (void*)&bIsAbsoultePos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IAxis::NewReference(LMOSACTXLib::eAxisType eAxis)
{
    void *_a[] = {0, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IAxis::ReferenceAxes()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IAxis::SetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam, const QVariant& val)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&eAxisParam, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IAxis::SetInverted(LMOSACTXLib::eAxisType eAxis, bool rhs)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IAxis::StopAxes()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IAxis::StopAxis(LMOSACTXLib::eAxisType eAxis)
{
    void *_a[] = {0, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IAxis::TAW(double W)
{
    void *_a[] = {0, (void*)&W};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IAxis::TAXY(double X, double Y)
{
    void *_a[] = {0, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void IAxis::TAZ(double Z)
{
    void *_a[] = {0, (void*)&Z};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void IAxis::TRW(double W)
{
    void *_a[] = {0, (void*)&W};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IAxis::TRX(double X)
{
    void *_a[] = {0, (void*)&X};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IAxis::TRXY(double X, double Y)
{
    void *_a[] = {0, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IAxis::TRY(double Y)
{
    void *_a[] = {0, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IAxis::TRZ(double Z)
{
    void *_a[] = {0, (void*)&Z};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}


inline QVariant IMachineCfg::GetValue(int categoryId, int valueId)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&categoryId, (void*)&valueId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IMachineCfg::SetValue(int categoryId, int valueId, const QVariant& Value)
{
    void *_a[] = {0, (void*)&categoryId, (void*)&valueId, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline bool Layer::Exportable() const
{
    QVariant qax_result = property("Exportable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Layer::SetExportable(bool value){ setProperty("Exportable", QVariant(value)); }

inline double Layer::FocusCorrection() const
{
    QVariant qax_result = property("FocusCorrection");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Layer::SetFocusCorrection(double value){ setProperty("FocusCorrection", QVariant(value)); }

inline double Layer::HeightZAxis() const
{
    QVariant qax_result = property("HeightZAxis");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void Layer::SetHeightZAxis(double value){ setProperty("HeightZAxis", QVariant(value)); }

inline bool Layer::Laserable() const
{
    QVariant qax_result = property("Laserable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Layer::SetLaserable(bool value){ setProperty("Laserable", QVariant(value)); }

inline QString Layer::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool Layer::Selectable() const
{
    QVariant qax_result = property("Selectable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Layer::SetSelectable(bool value){ setProperty("Selectable", QVariant(value)); }

inline bool Layer::Visible() const
{
    QVariant qax_result = property("Visible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void Layer::SetVisible(bool value){ setProperty("Visible", QVariant(value)); }

inline QString Layer::_Name() const
{
    QVariant qax_result = property("_Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}


inline int Layers::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::ILayer* Layers::Item(const QString& Name)
{
    LMOSACTXLib::ILayer* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::ILayer*>("ILayer*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::ILayer>("ILayer", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* Layers::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int ResDesc::ObjectID() const
{
    QVariant qax_result = property("ObjectID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString ResDesc::ObjectName() const
{
    QVariant qax_result = property("ObjectName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ResDesc::ResName() const
{
    QVariant qax_result = property("ResName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline LMOSACTXLib::eResourceTypes ResDesc::ResType() const
{
    QVariant qax_result = property("ResType");
    Q_ASSERT(qax_result.isValid());
    return *(LMOSACTXLib::eResourceTypes*)qax_result.constData();
}


inline bool Axis::AxisAvailable(LMOSACTXLib::eAxisType eAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QVariant Axis::GetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis, (void*)&eAxisParam};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline double Axis::GetPos(LMOSACTXLib::eAxisType eAxis)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline double Axis::GetPos(LMOSACTXLib::eAxisType eAxis, bool bDoRequest)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis, (void*)&bDoRequest};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline double Axis::GetPosW()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline double Axis::GetPosX()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline double Axis::GetPosY()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline double Axis::GetPosZ()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool Axis::Inverted(LMOSACTXLib::eAxisType eAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void Axis::Jog(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eJogType eJog)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&eJog};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void Axis::MoveAxes()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void Axis::MoveAxisAsync(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&dPos, (void*)&bIsAbsoultePos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void Axis::MoveEnd(int lResult)
{
    void *_a[] = {0, (void*)&lResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Axis::MoveHome()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Axis::NewPos(LMOSACTXLib::eAxisType eAxis, double dPos, bool bIsAbsoultePos)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&dPos, (void*)&bIsAbsoultePos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void Axis::NewReference(LMOSACTXLib::eAxisType eAxis)
{
    void *_a[] = {0, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void Axis::ReferenceAxes()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void Axis::SetAxisParameter(LMOSACTXLib::eAxisType eAxis, LMOSACTXLib::eAxisParamType eAxisParam, const QVariant& val)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&eAxisParam, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void Axis::SetInverted(LMOSACTXLib::eAxisType eAxis, bool rhs)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void Axis::StopAxes()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void Axis::StopAxis(LMOSACTXLib::eAxisType eAxis)
{
    void *_a[] = {0, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void Axis::TAW(double W)
{
    void *_a[] = {0, (void*)&W};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void Axis::TAXY(double X, double Y)
{
    void *_a[] = {0, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void Axis::TAZ(double Z)
{
    void *_a[] = {0, (void*)&Z};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void Axis::TRW(double W)
{
    void *_a[] = {0, (void*)&W};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void Axis::TRX(double X)
{
    void *_a[] = {0, (void*)&X};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void Axis::TRXY(double X, double Y)
{
    void *_a[] = {0, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void Axis::TRY(double Y)
{
    void *_a[] = {0, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void Axis::TRZ(double Z)
{
    void *_a[] = {0, (void*)&Z};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}


inline int Variable::Length() const
{
    QVariant qax_result = property("Length");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString Variable::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString Variable::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Variable::SetValue(const QString& value){ setProperty("Value", QVariant(value)); }

inline QString Variable::_Value() const
{
    QVariant qax_result = property("_Value");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Variable::set_Value(const QString& value){ setProperty("_Value", QVariant(value)); }


inline int IVariable::Length() const
{
    QVariant qax_result = property("Length");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IVariable::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IVariable::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVariable::SetValue(const QString& value){ setProperty("Value", QVariant(value)); }

inline QString IVariable::_Value() const
{
    QVariant qax_result = property("_Value");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void IVariable::set_Value(const QString& value){ setProperty("_Value", QVariant(value)); }


inline int Variables::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::IVariable* Variables::Item(const QString& Name)
{
    LMOSACTXLib::IVariable* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::IVariable*>("IVariable*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::IVariable>("IVariable", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* Variables::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int IVariables::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::IVariable* IVariables::Item(const QString& Name)
{
    LMOSACTXLib::IVariable* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::IVariable*>("IVariable*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::IVariable>("IVariable", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* IVariables::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int TextObject::Alignment() const
{
    QVariant qax_result = property("Alignment");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TextObject::SetAlignment(int value){ setProperty("Alignment", QVariant(value)); }

inline double TextObject::CharSpace() const
{
    QVariant qax_result = property("CharSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextObject::SetCharSpace(double value){ setProperty("CharSpace", QVariant(value)); }

inline QString TextObject::Font() const
{
    QVariant qax_result = property("Font");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextObject::SetFont(const QString& value){ setProperty("Font", QVariant(value)); }

inline int TextObject::FrameMode() const
{
    QVariant qax_result = property("FrameMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TextObject::SetFrameMode(int value){ setProperty("FrameMode", QVariant(value)); }

inline double TextObject::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextObject::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline int TextObject::ID() const
{
    QVariant qax_result = property("ID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool TextObject::IsCrossfree() const
{
    QVariant qax_result = property("IsCrossfree");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TextObject::SetIsCrossfree(bool value){ setProperty("IsCrossfree", QVariant(value)); }

inline bool TextObject::IsFixedSize() const
{
    QVariant qax_result = property("IsFixedSize");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TextObject::SetIsFixedSize(bool value){ setProperty("IsFixedSize", QVariant(value)); }

inline bool TextObject::IsHatched() const
{
    QVariant qax_result = property("IsHatched");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TextObject::SetIsHatched(bool value){ setProperty("IsHatched", QVariant(value)); }

inline double TextObject::Italic() const
{
    QVariant qax_result = property("Italic");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextObject::SetItalic(double value){ setProperty("Italic", QVariant(value)); }

inline double TextObject::LineSpace() const
{
    QVariant qax_result = property("LineSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextObject::SetLineSpace(double value){ setProperty("LineSpace", QVariant(value)); }

inline QString TextObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double TextObject::Ratio() const
{
    QVariant qax_result = property("Ratio");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void TextObject::SetRatio(double value){ setProperty("Ratio", QVariant(value)); }

inline QString TextObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TextObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }


inline int ITextObject::Alignment() const
{
    QVariant qax_result = property("Alignment");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITextObject::SetAlignment(int value){ setProperty("Alignment", QVariant(value)); }

inline double ITextObject::CharSpace() const
{
    QVariant qax_result = property("CharSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITextObject::SetCharSpace(double value){ setProperty("CharSpace", QVariant(value)); }

inline QString ITextObject::Font() const
{
    QVariant qax_result = property("Font");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ITextObject::SetFont(const QString& value){ setProperty("Font", QVariant(value)); }

inline int ITextObject::FrameMode() const
{
    QVariant qax_result = property("FrameMode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ITextObject::SetFrameMode(int value){ setProperty("FrameMode", QVariant(value)); }

inline double ITextObject::Height() const
{
    QVariant qax_result = property("Height");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITextObject::SetHeight(double value){ setProperty("Height", QVariant(value)); }

inline int ITextObject::ID() const
{
    QVariant qax_result = property("ID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool ITextObject::IsCrossfree() const
{
    QVariant qax_result = property("IsCrossfree");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ITextObject::SetIsCrossfree(bool value){ setProperty("IsCrossfree", QVariant(value)); }

inline bool ITextObject::IsFixedSize() const
{
    QVariant qax_result = property("IsFixedSize");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ITextObject::SetIsFixedSize(bool value){ setProperty("IsFixedSize", QVariant(value)); }

inline bool ITextObject::IsHatched() const
{
    QVariant qax_result = property("IsHatched");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ITextObject::SetIsHatched(bool value){ setProperty("IsHatched", QVariant(value)); }

inline double ITextObject::Italic() const
{
    QVariant qax_result = property("Italic");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITextObject::SetItalic(double value){ setProperty("Italic", QVariant(value)); }

inline double ITextObject::LineSpace() const
{
    QVariant qax_result = property("LineSpace");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITextObject::SetLineSpace(double value){ setProperty("LineSpace", QVariant(value)); }

inline QString ITextObject::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double ITextObject::Ratio() const
{
    QVariant qax_result = property("Ratio");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void ITextObject::SetRatio(double value){ setProperty("Ratio", QVariant(value)); }

inline QString ITextObject::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ITextObject::SetText(const QString& value){ setProperty("Text", QVariant(value)); }


inline int TextObjects::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::ITextObject* TextObjects::Item(int ID)
{
    LMOSACTXLib::ITextObject* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::ITextObject*>("ITextObject*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::ITextObject>("ITextObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* TextObjects::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int ITextObjects::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::ITextObject* ITextObjects::Item(int ID)
{
    LMOSACTXLib::ITextObject* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::ITextObject*>("ITextObject*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::ITextObject>("ITextObject", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* ITextObjects::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline QString ComponentBase::ClassInfo() const
{
    QVariant qax_result = property("ClassInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ComponentBase::ClassName() const
{
    QVariant qax_result = property("ClassName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ComponentBase::GenericName() const
{
    QVariant qax_result = property("GenericName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int ComponentBase::ID() const
{
    QVariant qax_result = property("ID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QVariant ComponentBase::GetAttribute(const QString& attributeName, bool sync)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&attributeName, (void*)&sync};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void ComponentBase::SetAttribute(const QString& attributeName, const QVariant& val, bool sync)
{
    void *_a[] = {0, (void*)&attributeName, (void*)&val, (void*)&sync};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline QString IComponentBase::ClassInfo() const
{
    QVariant qax_result = property("ClassInfo");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IComponentBase::ClassName() const
{
    QVariant qax_result = property("ClassName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IComponentBase::GenericName() const
{
    QVariant qax_result = property("GenericName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IComponentBase::ID() const
{
    QVariant qax_result = property("ID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QVariant IComponentBase::GetAttribute(const QString& attributeName, bool sync)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&attributeName, (void*)&sync};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IComponentBase::SetAttribute(const QString& attributeName, const QVariant& val, bool sync)
{
    void *_a[] = {0, (void*)&attributeName, (void*)&val, (void*)&sync};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline int ComponentBases::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::IComponentBase* ComponentBases::Item(int ID)
{
    LMOSACTXLib::IComponentBase* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::IComponentBase*>("IComponentBase*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::IComponentBase>("IComponentBase", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* ComponentBases::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int IComponentBases::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::IComponentBase* IComponentBases::Item(int ID)
{
    LMOSACTXLib::IComponentBase* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::IComponentBase*>("IComponentBase*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::IComponentBase>("IComponentBase", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* IComponentBases::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline QString MachineCfgParam::Category() const
{
    QVariant qax_result = property("Category");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString MachineCfgParam::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString MachineCfgParam::Unit() const
{
    QVariant qax_result = property("Unit");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QVariant MachineCfgParam::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}


inline QString IMachineCfgParam::Category() const
{
    QVariant qax_result = property("Category");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IMachineCfgParam::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IMachineCfgParam::Unit() const
{
    QVariant qax_result = property("Unit");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QVariant IMachineCfgParam::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}


inline int MachineCfgParams::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::IMachineCfgParam* MachineCfgParams::Item(int ID)
{
    LMOSACTXLib::IMachineCfgParam* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::IMachineCfgParam*>("IMachineCfgParam*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::IMachineCfgParam>("IMachineCfgParam", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* MachineCfgParams::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int IMachineCfgParams::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline LMOSACTXLib::IMachineCfgParam* IMachineCfgParams::Item(int ID)
{
    LMOSACTXLib::IMachineCfgParam* qax_result = 0;
    qRegisterMetaType<LMOSACTXLib::IMachineCfgParam*>("IMachineCfgParam*", &qax_result);
    qRegisterMetaType<LMOSACTXLib::IMachineCfgParam>("IMachineCfgParam", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline IUnknown* IMachineCfgParams::_NewEnum()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline QString PowerDialog::FailedReason() const
{
    QVariant qax_result = property("FailedReason");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QVariant PowerDialog::LCUOffset() const
{
    QVariant qax_result = property("LCUOffset");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline QVariant PowerDialog::Power() const
{
    QVariant qax_result = property("Power");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline LMOSACTXLib::pgResultConstants PowerDialog::Result() const
{
    QVariant qax_result = property("Result");
    Q_ASSERT(qax_result.isValid());
    return *(LMOSACTXLib::pgResultConstants*)qax_result.constData();
}

inline int PowerDialog::GetError(QString& description)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&description};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool PowerDialog::HandleEvent(int lEvent)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lEvent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void PowerDialog::Show()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void PowerDialog::ShowAutomatic()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline IDispatch* LMOSActX::AllComponents() const
{
    QVariant qax_result = property("AllComponents");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* LMOSActX::AllMachineCfgParams() const
{
    QVariant qax_result = property("AllMachineCfgParams");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool LMOSActX::AutoSignalJobEnd() const
{
    QVariant qax_result = property("AutoSignalJobEnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void LMOSActX::SetAutoSignalJobEnd(bool value){ setProperty("AutoSignalJobEnd", QVariant(value)); }

inline bool LMOSActX::AutoSignalMarkingEnd() const
{
    QVariant qax_result = property("AutoSignalMarkingEnd");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void LMOSActX::SetAutoSignalMarkingEnd(bool value){ setProperty("AutoSignalMarkingEnd", QVariant(value)); }

inline IDispatch* LMOSActX::Axis() const
{
    QVariant qax_result = property("Axis");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline int LMOSActX::Dummy1() const
{
    QVariant qax_result = property("Dummy1");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LMOSActX::SetDummy1(int value){ setProperty("Dummy1", QVariant(value)); }

inline int LMOSActX::Dummy2() const
{
    QVariant qax_result = property("Dummy2");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LMOSActX::SetDummy2(int value){ setProperty("Dummy2", QVariant(value)); }

inline QString LMOSActX::FileName() const
{
    QVariant qax_result = property("FileName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LMOSActX::SetFileName(const QString& value){ setProperty("FileName", QVariant(value)); }

inline IDispatch* LMOSActX::GlobalVariables() const
{
    QVariant qax_result = property("GlobalVariables");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool LMOSActX::HasMatrix() const
{
    QVariant qax_result = property("HasMatrix");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void LMOSActX::SetHasMatrix(bool value){ setProperty("HasMatrix", QVariant(value)); }

inline IDispatch* LMOSActX::Layers() const
{
    QVariant qax_result = property("Layers");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* LMOSActX::LocalVariables() const
{
    QVariant qax_result = property("LocalVariables");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* LMOSActX::MachineCfg() const
{
    QVariant qax_result = property("MachineCfg");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline IDispatch* LMOSActX::PowerDlg() const
{
    QVariant qax_result = property("PowerDlg");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IDispatch**)qax_result.constData();
}

inline bool LMOSActX::SuppressAutoRedraw() const
{
    QVariant qax_result = property("SuppressAutoRedraw");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void LMOSActX::SetSuppressAutoRedraw(bool value){ setProperty("SuppressAutoRedraw", QVariant(value)); }

inline QString LMOSActX::VLMBuildLevel() const
{
    QVariant qax_result = property("VLMBuildLevel");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LMOSActX::VLMVersion() const
{
    QVariant qax_result = property("VLMVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int LMOSActX::VariableCnt() const
{
    QVariant qax_result = property("VariableCnt");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void LMOSActX::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void LMOSActX::ActivateZoomWindow(bool newState)
{
    void *_a[] = {0, (void*)&newState};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void LMOSActX::AddGlobalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY)
{
    void *_a[] = {0, (void*)&Name, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void LMOSActX::AddLocalQPSet(const QString& Name, double CURRENT, int SPEED, int FREQUENCY)
{
    void *_a[] = {0, (void*)&Name, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void LMOSActX::BeamOn(bool bOn)
{
    void *_a[] = {0, (void*)&bOn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline bool LMOSActX::CancelJob()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool LMOSActX::ClearAlarms()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool LMOSActX::ClearLayout()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool LMOSActX::DrawingAngleOffset(double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool LMOSActX::DrawingGetDimension(double& dWidth, double& dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool LMOSActX::DrawingGetPosValues(double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool LMOSActX::DrawingPosOffset(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool LMOSActX::DrawingSetDimension(double dWidth, double dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool LMOSActX::DrawingSetPosValues(double dX, double dY, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline void LMOSActX::DriftCorr(double lambda1, double lambda2, double deltax, double deltay, int hindex)
{
    void *_a[] = {0, (void*)&lambda1, (void*)&lambda2, (void*)&deltax, (void*)&deltay, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void LMOSActX::DriftCorrInternal(LMOSACTXLib::eHeads Head, LMOSACTXLib::eDriftModes mode)
{
    void *_a[] = {0, (void*)&Head, (void*)&mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline bool LMOSActX::ExportAsLogo(const QString& LogoName, bool ExportEllipsesAsPolylines, int IncrementsPerFullEllipse)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LogoName, (void*)&ExportEllipsesAsPolylines, (void*)&IncrementsPerFullEllipse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline bool LMOSActX::ExportPl0(const QString& PL0FileName, bool bShowInitDlg)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PL0FileName, (void*)&bShowInitDlg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline bool LMOSActX::ExportVISFile(const QString& VISFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&VISFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool LMOSActX::FileName2(const QString& FName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline QVariant LMOSActX::GetAlarms()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool LMOSActX::GetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline bool LMOSActX::GetBackgroundProperties(const QString& MOName, bool& ShowFrame, bool& DrawFrame, bool& BackgroundBitmap, QString& BitmapName, bool& BackgroundColor, int& Color)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&ShowFrame, (void*)&DrawFrame, (void*)&BackgroundBitmap, (void*)&BitmapName, (void*)&BackgroundColor, (void*)&Color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline bool LMOSActX::GetDimension(const QString& ObjectName, double& dWidth, double& dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline QVariant LMOSActX::GetGlobalHatchSetNames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline bool LMOSActX::GetGlobalQPSet(const QString& QPSetName, double& CURRENT, int& SPEED, int& FREQUENCY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&QPSetName, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline QVariant LMOSActX::GetGlobalQPSetNames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline bool LMOSActX::GetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hpname, (void*)&hstype, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline bool LMOSActX::GetHatchProperties(const QString& MOName, bool& Unidirectional, bool& Bidirectional, bool& Meandering, bool& OnTheFly, double& LineExcess, bool& NoOutline, bool& Inverse, bool& OutlineCorrection, bool& AutoLineWitdth, bool& OptimizeJumps, double& HatchAngle, double& FromOutline, double& Overlap)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&Unidirectional, (void*)&Bidirectional, (void*)&Meandering, (void*)&OnTheFly, (void*)&LineExcess, (void*)&NoOutline, (void*)&Inverse, (void*)&OutlineCorrection, (void*)&AutoLineWitdth, (void*)&OptimizeJumps, (void*)&HatchAngle, (void*)&FromOutline, (void*)&Overlap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool LMOSActX::GetIODefinitions(LMOSACTXLib::eIODirection eDir, const QVariant& bitfunction)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&eDir, (void*)&bitfunction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool LMOSActX::GetLayerProperties(const QString& MOName, QString& LayerName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&LayerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline QVariant LMOSActX::GetLocalQPSetNames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline QString LMOSActX::GetLogo(const QString& ObjectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline QString LMOSActX::GetLogoFilesPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline bool LMOSActX::GetLogoProperties(const QString& LogoName, QString& FileName, bool& OriginalSize, double& xScale, double& yScale, double& Slant, bool& Hatch)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LogoName, (void*)&FileName, (void*)&OriginalSize, (void*)&xScale, (void*)&yScale, (void*)&Slant, (void*)&Hatch};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline QString LMOSActX::GetMODescription(const QString& MOName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline QVariant LMOSActX::GetMONames()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline bool LMOSActX::GetMOQPSet(const QString& MOName, QString& QPSetName, LMOSQPSetTypeConstants& QPSetType)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&QPSetName, (void*)&QPSetType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline LMOSMOTypeConstants LMOSActX::GetMOType(const QString& MOName)
{
    LMOSMOTypeConstants qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline QString LMOSActX::GetMarkingFilesPath()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline int LMOSActX::GetMatrixCellAmount(const QString& MatrixName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline bool LMOSActX::GetMatrixCellProperties(const QString& MatrixName, double& Width, double& Height, double& XOffset, double& YOffset, double& XShift, double& YShift, double& Orientation)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&Width, (void*)&Height, (void*)&XOffset, (void*)&YOffset, (void*)&XShift, (void*)&YShift, (void*)&Orientation};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline QString LMOSActX::GetMatrixCustomType(const QString& MatrixName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}

inline bool LMOSActX::GetMatrixGroupData(const QString& MatrixName, int Index, double& X, int& xElements, double& Y, int& yElements)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&Index, (void*)&X, (void*)&xElements, (void*)&Y, (void*)&yElements};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
    return qax_result;
}

inline bool LMOSActX::GetMatrixGroupProperties(const QString& MatrixName, double& X, int& xElements, double& Y, int& yElements)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&X, (void*)&xElements, (void*)&Y, (void*)&yElements};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
    return qax_result;
}

inline bool LMOSActX::GetMatrixInterleaveProperties(const QString& MatrixName, double& X, double& Y)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&X, (void*)&Y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline int LMOSActX::GetMatrixMaxBinCount(const QString& MatrixName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline bool LMOSActX::GetMatrixOptionProperties(const QString& MatrixName, QString& CustomType, bool& ColoredCell, bool& ShowReferenceCell, bool& BinLayoutStatic, bool& BinLayoutDynamic, int& maxBin, bool& Multiplexed)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&CustomType, (void*)&ColoredCell, (void*)&ShowReferenceCell, (void*)&BinLayoutStatic, (void*)&BinLayoutDynamic, (void*)&maxBin, (void*)&Multiplexed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline bool LMOSActX::GetMatrixRowsAndColsCnt(const QString& MatrixName, int& RowCnt, int& ColCnt)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&RowCnt, (void*)&ColCnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
    return qax_result;
}

inline int LMOSActX::GetMissingResources(QVariant& list)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&list};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
    return qax_result;
}

inline int LMOSActX::GetNoMarkMOCount()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline bool LMOSActX::GetPosValues(const QString& ObjectName, double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline bool LMOSActX::GetPosValuesAbs(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&lMatrixCellIndex, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline bool LMOSActX::GetQPSetProperties(const QString& QPSetName, LMOSACTXLib::LMOSQPSetTypeConstants QPSetType, const QString& MOName, QVariant& PropertyNames, QVariant& PropertyValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&QPSetName, (void*)&QPSetType, (void*)&MOName, (void*)&PropertyNames, (void*)&PropertyValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline bool LMOSActX::GetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&qpname, (void*)&qptype, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
    return qax_result;
}

inline int LMOSActX::GetResources(QVariant& list)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&list};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
    return qax_result;
}

inline bool LMOSActX::GetRuntimeHeadOffset(double& X, double& Y, int hindex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
    return qax_result;
}

inline ShutterStateConstants LMOSActX::GetShutterState()
{
    ShutterStateConstants qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline bool LMOSActX::GetSignal(LMOSACTXLib::eSignalConstants Signal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Signal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
    return qax_result;
}

inline bool LMOSActX::GetSizePosProperties(const QString& MOName, double& PositionX, double& PositionY, double& SizeDX, double& SizeDY, double& Angle, bool& PreserveAspectRatio, bool& FlipHorizontal, bool& FlipVertical, OrientationConstants& RefPoint)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&PositionX, (void*)&PositionY, (void*)&SizeDX, (void*)&SizeDY, (void*)&Angle, (void*)&PreserveAspectRatio, (void*)&FlipHorizontal, (void*)&FlipVertical, (void*)&RefPoint};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
    return qax_result;
}

inline bool LMOSActX::GetSurfaceRadius(double& radius)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&radius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
    return qax_result;
}

inline bool LMOSActX::GetSurfaceRefPoint(double& RefX, double& RefY, double& RefZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&RefX, (void*)&RefY, (void*)&RefZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
    return qax_result;
}

inline bool LMOSActX::GetSurfaceVector(double& VecX, double& VecY, double& VecZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&VecX, (void*)&VecY, (void*)&VecZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
    return qax_result;
}

inline bool LMOSActX::GetSystemParameter(LMOSACTXLib::eSystemParameterGet partype, QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
    return qax_result;
}

inline QString LMOSActX::GetText(const QString& ObjectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
    return qax_result;
}

inline bool LMOSActX::ImportDXFFile(const QString& DXFFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&DXFFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
    return qax_result;
}

inline void LMOSActX::ImportDXFFile2(const QString& DXFFileName)
{
    void *_a[] = {0, (void*)&DXFFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}

inline bool LMOSActX::ImportLogoFile(const QString& XMLFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
    return qax_result;
}

inline bool LMOSActX::ImportLogoFile2(const QString& XMLFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline bool LMOSActX::ImportPSFile(const QString& PSFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PSFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline void LMOSActX::ImportPSFile2(const QString& PSFileName)
{
    void *_a[] = {0, (void*)&PSFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
}

inline bool LMOSActX::ImportXMLFile(const QString& XMLFileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline void LMOSActX::ImportXMLFile2(const QString& XMLFileName)
{
    void *_a[] = {0, (void*)&XMLFileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
}

inline bool LMOSActX::InitMachine()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
    return qax_result;
}

inline bool LMOSActX::InitMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ModulesMask};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
    return qax_result;
}

inline bool LMOSActX::IsFeatureLicensed(const QString& feature)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&feature};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
    return qax_result;
}

inline int LMOSActX::IsMOName(const QString& MOName)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
    return qax_result;
}

inline bool LMOSActX::JobLoaded()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
    return qax_result;
}

inline IDispatch* LMOSActX::Layer(const QString& Name)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
    return qax_result;
}

inline bool LMOSActX::LoadInclinedPlaneFCR(double dAlpha, double dBeta, double dBeamOrigin, double dPlaneIntersectionOffset, int lPlaneIntersectionOrientation, int lHeadIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dAlpha, (void*)&dBeta, (void*)&dBeamOrigin, (void*)&dPlaneIntersectionOffset, (void*)&lPlaneIntersectionOrientation, (void*)&lHeadIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
    return qax_result;
}

inline bool LMOSActX::LoadJob()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
    return qax_result;
}

inline bool LMOSActX::LoadXML(const QString& XMLString)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&XMLString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
    return qax_result;
}

inline void LMOSActX::LoadXML2(const QString& XMLString)
{
    void *_a[] = {0, (void*)&XMLString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
}

inline bool LMOSActX::MatrixAssignBinLayout(const QString& MatrixName, int BinNum, const QString& LayoutName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinNum, (void*)&LayoutName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
    return qax_result;
}

inline bool LMOSActX::MatrixAssignBinText(const QString& MatrixName, int BinNum, const QString& ObjectName, const QString& BinText)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinNum, (void*)&ObjectName, (void*)&BinText};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
    return qax_result;
}

inline int LMOSActX::MatrixQueryBin(const QString& MatrixName, int CellIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&CellIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
    return qax_result;
}

inline QString LMOSActX::MatrixQueryBinText(const QString& MatrixName, int BinNum, const QString& ObjectName)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinNum, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
    return qax_result;
}

inline bool LMOSActX::MatrixQueryCellsPerPart(const QString& MatrixName, int PartIndex, int& CellStartIndex, int& CellCnt)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&PartIndex, (void*)&CellStartIndex, (void*)&CellCnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
    return qax_result;
}

inline bool LMOSActX::MatrixQueryPartCnt(const QString& MatrixName, int& PartCnt)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&PartCnt};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
    return qax_result;
}

inline bool LMOSActX::MatrixSelectBin(const QString& MatrixName, int CellIndex, int BinNum)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&CellIndex, (void*)&BinNum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
    return qax_result;
}

inline bool LMOSActX::MatrixSelectBinAll(const QString& MatrixName, QVariant& BinValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&BinValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
    return qax_result;
}

inline bool LMOSActX::MoveA(const QString& ObjectName, double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
    return qax_result;
}

inline bool LMOSActX::PLCCommand(const QString& ID1, const QString& ID2, const QString& Command)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ID1, (void*)&ID2, (void*)&Command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline bool LMOSActX::PLCCommandEx(const QString& ID1, const QString& ID2, const QVariant& Command)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ID1, (void*)&ID2, (void*)&Command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline bool LMOSActX::ReadByte(const int& Port, const int& bMask, int& InByte)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&bMask, (void*)&InByte};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
    return qax_result;
}

inline bool LMOSActX::ReadIOBit(const QVariant& bitfunction, QVariant& Result)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitfunction, (void*)&Result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
    return qax_result;
}

inline void LMOSActX::RedrawLayout()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
}

inline void LMOSActX::RemoveGlobalQPSet(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
}

inline void LMOSActX::RemoveLocalQPSet(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline bool LMOSActX::ReplaceDrawing(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
    return qax_result;
}

inline bool LMOSActX::ReplaceGlobalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OriginalQPSetName, (void*)&NewQPSetName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
    return qax_result;
}

inline bool LMOSActX::ReplaceLocalQPSet(const QString& OriginalQPSetName, const QString& NewQPSetName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OriginalQPSetName, (void*)&NewQPSetName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
    return qax_result;
}

inline bool LMOSActX::RotateA(const QString& ObjectName, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
    return qax_result;
}

inline void LMOSActX::RotateView(double Angle)
{
    void *_a[] = {0, (void*)&Angle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
}

inline bool LMOSActX::Save(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
    return qax_result;
}

inline bool LMOSActX::SaveAsVersion(const QString& FileName, LMOSACTXLib::LMOSSaveAsVersionConstants SaveVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&SaveVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
    return qax_result;
}

inline void LMOSActX::SaveGlobalHatchSets()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
}

inline void LMOSActX::SaveGlobalQPSets()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
}

inline bool LMOSActX::SaveImage(int resx, int resy, const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&resx, (void*)&resy, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
    return qax_result;
}

inline bool LMOSActX::SaveImageWithRuler(int resx, int resy, const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&resx, (void*)&resy, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
    return qax_result;
}

inline bool LMOSActX::SelectShadow(int ShadowIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ShadowIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
    return qax_result;
}

inline bool LMOSActX::SelectSingleStep(int StepIndex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StepIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
    return qax_result;
}

inline void LMOSActX::SetAxisUsedInVLM(LMOSACTXLib::eAxisType eAxis, bool Value)
{
    void *_a[] = {0, (void*)&eAxis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 180, _a);
}

inline bool LMOSActX::SetDimension(const QString& ObjectName, double dWidth, double dHeight)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dWidth, (void*)&dHeight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 181, _a);
    return qax_result;
}

inline bool LMOSActX::SetGlobalQPSet(const QString& QPSetName, double CURRENT, int SPEED, int FREQUENCY, bool bSave)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&QPSetName, (void*)&CURRENT, (void*)&SPEED, (void*)&FREQUENCY, (void*)&bSave};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
    return qax_result;
}

inline bool LMOSActX::SetHatchParam(const QString& hpname, LMOSACTXLib::eHSType hstype, LMOSACTXLib::eHatchParamType partype, const QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hpname, (void*)&hstype, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 187, _a);
    return qax_result;
}

inline bool LMOSActX::SetHatchProperties(const QString& MOName, bool Unidirectional, bool Bidirectional, bool Meandering, bool OnTheFly, double LineExcess, bool NoOutline, bool Inverse, bool OutlineCorrection, bool AutoLineWidth, bool OptimizeJumps, double HatchAngle, double FromOutline, double Overlap)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&Unidirectional, (void*)&Bidirectional, (void*)&Meandering, (void*)&OnTheFly, (void*)&LineExcess, (void*)&NoOutline, (void*)&Inverse, (void*)&OutlineCorrection, (void*)&AutoLineWidth, (void*)&OptimizeJumps, (void*)&HatchAngle, (void*)&FromOutline, (void*)&Overlap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 188, _a);
    return qax_result;
}

inline bool LMOSActX::SetLaserable(const QString& MOName, bool bFlag)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&bFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 189, _a);
    return qax_result;
}

inline bool LMOSActX::SetLogo(const QString& ObjectName, const QString& VariableValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&VariableValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
    return qax_result;
}

inline bool LMOSActX::SetMODescription(const QString& MOName, const QString& description)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&description};
    qt_metacall(QMetaObject::InvokeMetaMethod, 191, _a);
    return qax_result;
}

inline bool LMOSActX::SetMOLayer(const QString& MOName, const QString& LayerName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MOName, (void*)&LayerName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
    return qax_result;
}

inline bool LMOSActX::SetMatrixCellAngle(const QString& MatrixName, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
    return qax_result;
}

inline bool LMOSActX::SetMatrixCellOccupation(const QString& MatrixName, int iCellIndex, bool IsOccupied)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&iCellIndex, (void*)&IsOccupied};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
    return qax_result;
}

inline bool LMOSActX::SetMatrixCellOccupationAll(const QString& MatrixName, QVariant& OccValues)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&OccValues};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
    return qax_result;
}

inline bool LMOSActX::SetMatrixCellOffset(const QString& MatrixName, int iCellIndex, double OffX, double OffY, double OffPhi)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&iCellIndex, (void*)&OffX, (void*)&OffY, (void*)&OffPhi};
    qt_metacall(QMetaObject::InvokeMetaMethod, 196, _a);
    return qax_result;
}

inline bool LMOSActX::SetMatrixMaxBinCount(const QString& MatrixName, int MaxBinCount)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&MaxBinCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 197, _a);
    return qax_result;
}

inline bool LMOSActX::SetMatrixRefCell(const QString& MatrixName, int iIndex, bool bDrawRefCellOnly)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&MatrixName, (void*)&iIndex, (void*)&bDrawRefCellOnly};
    qt_metacall(QMetaObject::InvokeMetaMethod, 198, _a);
    return qax_result;
}

inline bool LMOSActX::SetPosValues(const QString& ObjectName, double dX, double dY, double dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 199, _a);
    return qax_result;
}

inline bool LMOSActX::SetQualityParam(const QString& qpname, LMOSACTXLib::eQPType qptype, LMOSACTXLib::eParamType partype, const QVariant& varVal, bool bSave)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&qpname, (void*)&qptype, (void*)&partype, (void*)&varVal, (void*)&bSave};
    qt_metacall(QMetaObject::InvokeMetaMethod, 200, _a);
    return qax_result;
}

inline bool LMOSActX::SetRuntimeHeadOffset(double X, double Y, int hindex)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&X, (void*)&Y, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 201, _a);
    return qax_result;
}

inline void LMOSActX::SetSignal(LMOSACTXLib::eSignalConstants Signal, bool Value)
{
    void *_a[] = {0, (void*)&Signal, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 202, _a);
}

inline bool LMOSActX::SetSurfaceRadius(double radius)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&radius};
    qt_metacall(QMetaObject::InvokeMetaMethod, 204, _a);
    return qax_result;
}

inline bool LMOSActX::SetSurfaceRefPoint(double RefX, double RefY, double RefZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&RefX, (void*)&RefY, (void*)&RefZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 205, _a);
    return qax_result;
}

inline bool LMOSActX::SetSurfaceVector(double VecX, double VecY, double VecZ)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&VecX, (void*)&VecY, (void*)&VecZ};
    qt_metacall(QMetaObject::InvokeMetaMethod, 206, _a);
    return qax_result;
}

inline bool LMOSActX::SetSystemParameter(LMOSACTXLib::eSystemParameterSet partype, const QVariant& varVal)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&partype, (void*)&varVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 207, _a);
    return qax_result;
}

inline bool LMOSActX::SetText(const QString& ObjectName, const QString& VariableValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&VariableValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
    return qax_result;
}

inline void LMOSActX::ShowMarkingArea()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
}

inline void LMOSActX::ShowMarkingAreaZoom()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
}

inline void LMOSActX::ShowMatrixCell()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
}

inline void LMOSActX::ShowMatrixCell2(const QString& MatrixName)
{
    void *_a[] = {0, (void*)&MatrixName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 212, _a);
}

inline void LMOSActX::ShowMatrixCellZoom()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 213, _a);
}

inline void LMOSActX::ShowWholeDrawing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
}

inline bool LMOSActX::ShowZoomWindow(int topLeftX, int topLeftY, int bottomRightX, int bottomRightY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&topLeftX, (void*)&topLeftY, (void*)&bottomRightX, (void*)&bottomRightY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 215, _a);
    return qax_result;
}

inline bool LMOSActX::SplitDrawing(double offset, double Overlap)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&offset, (void*)&Overlap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
    return qax_result;
}

inline bool LMOSActX::StartMarking()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 217, _a);
    return qax_result;
}

inline void LMOSActX::StartPosHelp(const QString& ObjectName)
{
    void *_a[] = {0, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 218, _a);
}

inline void LMOSActX::StartPosHelpLast(const QString& ObjectName)
{
    void *_a[] = {0, (void*)&ObjectName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 219, _a);
}

inline void LMOSActX::StdCorr(int hindex)
{
    void *_a[] = {0, (void*)&hindex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 220, _a);
}

inline bool LMOSActX::StopMarking()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 221, _a);
    return qax_result;
}

inline void LMOSActX::StopPosHelp()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 222, _a);
}

inline void LMOSActX::SynchronizeMarking()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 223, _a);
}

inline bool LMOSActX::TTLFieldCorr(const QString& FileName, int Action, int Head)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&Action, (void*)&Head};
    qt_metacall(QMetaObject::InvokeMetaMethod, 224, _a);
    return qax_result;
}

inline bool LMOSActX::TTLGetAbsPosValues(const QString& ObjectName, int lMatrixCellIndex, double& dX, double& dY, double& dAngle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ObjectName, (void*)&lMatrixCellIndex, (void*)&dX, (void*)&dY, (void*)&dAngle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 225, _a);
    return qax_result;
}

inline bool LMOSActX::TTLPxCamera(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 226, _a);
    return qax_result;
}

inline bool LMOSActX::TTLPxLaser(double dX, double dY)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dX, (void*)&dY};
    qt_metacall(QMetaObject::InvokeMetaMethod, 227, _a);
    return qax_result;
}

inline bool LMOSActX::TermMachine()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 228, _a);
    return qax_result;
}

inline bool LMOSActX::TermMachineEx(LMOSACTXLib::eMachineModuleConstants ModulesMask)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ModulesMask};
    qt_metacall(QMetaObject::InvokeMetaMethod, 229, _a);
    return qax_result;
}

inline IDispatch* LMOSActX::TextObjects(const QString& MOName)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&MOName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 230, _a);
    return qax_result;
}

inline IDispatch* LMOSActX::Variable(int Index)
{
    IDispatch* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&Index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
    return qax_result;
}

inline bool LMOSActX::WaitOnByte(LMOSACTXLib::InPortConstants Port, int bMask, int bData, int lTimeOut)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&bMask, (void*)&bData, (void*)&lTimeOut};
    qt_metacall(QMetaObject::InvokeMetaMethod, 232, _a);
    return qax_result;
}

inline bool LMOSActX::WaitOnIOBit(const QVariant& bitfunction, const QVariant& values, int timeout)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitfunction, (void*)&values, (void*)&timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 233, _a);
    return qax_result;
}

inline bool LMOSActX::WriteByte(LMOSACTXLib::OutPortConstants Port, int bMask, int bData)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&bMask, (void*)&bData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 234, _a);
    return qax_result;
}

inline bool LMOSActX::WriteIOBit(const QVariant& bitfunction, const QVariant& values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitfunction, (void*)&values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 235, _a);
    return qax_result;
}


inline QVariant MachineCfg::GetValue(int categoryId, int valueId)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&categoryId, (void*)&valueId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void MachineCfg::SetValue(int categoryId, int valueId, const QVariant& Value)
{
    void *_a[] = {0, (void*)&categoryId, (void*)&valueId, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IPowerDlg, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IPowerDlg*>(t)->LMOSACTXLib::IPowerDlg::~IPowerDlg();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IPowerDlg;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IPowerDlg*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IPowerDlg*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ILayers, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ILayers*>(t)->LMOSACTXLib::ILayers::~ILayers();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ILayers;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ILayers*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ILayers*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ILayer, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ILayer*>(t)->LMOSACTXLib::ILayer::~ILayer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ILayer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ILayer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ILayer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::_DLMOSActX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::_DLMOSActX*>(t)->LMOSACTXLib::_DLMOSActX::~_DLMOSActX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::_DLMOSActX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::_DLMOSActX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::_DLMOSActX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IResDesc, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IResDesc*>(t)->LMOSACTXLib::IResDesc::~IResDesc();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IResDesc;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IResDesc*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IResDesc*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IAxis, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IAxis*>(t)->LMOSACTXLib::IAxis::~IAxis();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IAxis;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IAxis*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IAxis*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IMachineCfg, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IMachineCfg*>(t)->LMOSACTXLib::IMachineCfg::~IMachineCfg();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IMachineCfg;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IMachineCfg*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IMachineCfg*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::Layer, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::Layer*>(t)->LMOSACTXLib::Layer::~Layer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::Layer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::Layer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::Layer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::Layers, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::Layers*>(t)->LMOSACTXLib::Layers::~Layers();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::Layers;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::Layers*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::Layers*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ResDesc, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ResDesc*>(t)->LMOSACTXLib::ResDesc::~ResDesc();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ResDesc;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ResDesc*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ResDesc*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::Axis, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::Axis*>(t)->LMOSACTXLib::Axis::~Axis();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::Axis;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::Axis*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::Axis*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::Variable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::Variable*>(t)->LMOSACTXLib::Variable::~Variable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::Variable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::Variable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::Variable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IVariable, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IVariable*>(t)->LMOSACTXLib::IVariable::~IVariable();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IVariable;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IVariable*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IVariable*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::Variables, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::Variables*>(t)->LMOSACTXLib::Variables::~Variables();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::Variables;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::Variables*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::Variables*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IVariables, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IVariables*>(t)->LMOSACTXLib::IVariables::~IVariables();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IVariables;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IVariables*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IVariables*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::TextObject, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::TextObject*>(t)->LMOSACTXLib::TextObject::~TextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::TextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::TextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::TextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ITextObject, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ITextObject*>(t)->LMOSACTXLib::ITextObject::~ITextObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ITextObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ITextObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ITextObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::TextObjects, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::TextObjects*>(t)->LMOSACTXLib::TextObjects::~TextObjects();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::TextObjects;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::TextObjects*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::TextObjects*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ITextObjects, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ITextObjects*>(t)->LMOSACTXLib::ITextObjects::~ITextObjects();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ITextObjects;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ITextObjects*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ITextObjects*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ComponentBase, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ComponentBase*>(t)->LMOSACTXLib::ComponentBase::~ComponentBase();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ComponentBase;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ComponentBase*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ComponentBase*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IComponentBase, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IComponentBase*>(t)->LMOSACTXLib::IComponentBase::~IComponentBase();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IComponentBase;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IComponentBase*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IComponentBase*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::ComponentBases, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::ComponentBases*>(t)->LMOSACTXLib::ComponentBases::~ComponentBases();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::ComponentBases;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::ComponentBases*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::ComponentBases*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IComponentBases, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IComponentBases*>(t)->LMOSACTXLib::IComponentBases::~IComponentBases();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IComponentBases;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IComponentBases*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IComponentBases*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::MachineCfgParam, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::MachineCfgParam*>(t)->LMOSACTXLib::MachineCfgParam::~MachineCfgParam();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::MachineCfgParam;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::MachineCfgParam*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::MachineCfgParam*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IMachineCfgParam, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IMachineCfgParam*>(t)->LMOSACTXLib::IMachineCfgParam::~IMachineCfgParam();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IMachineCfgParam;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IMachineCfgParam*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IMachineCfgParam*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::MachineCfgParams, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::MachineCfgParams*>(t)->LMOSACTXLib::MachineCfgParams::~MachineCfgParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::MachineCfgParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::MachineCfgParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::MachineCfgParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::IMachineCfgParams, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::IMachineCfgParams*>(t)->LMOSACTXLib::IMachineCfgParams::~IMachineCfgParams();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::IMachineCfgParams;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::IMachineCfgParams*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::IMachineCfgParams*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::PowerDialog, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::PowerDialog*>(t)->LMOSACTXLib::PowerDialog::~PowerDialog();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::PowerDialog;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::PowerDialog*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::PowerDialog*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::LMOSActX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::LMOSActX*>(t)->LMOSACTXLib::LMOSActX::~LMOSActX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::LMOSActX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::LMOSActX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::LMOSActX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<LMOSACTXLib::MachineCfg, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<LMOSACTXLib::MachineCfg*>(t)->LMOSACTXLib::MachineCfg::~MachineCfg();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) LMOSACTXLib::MachineCfg;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const LMOSACTXLib::MachineCfg*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<LMOSACTXLib::MachineCfg*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

